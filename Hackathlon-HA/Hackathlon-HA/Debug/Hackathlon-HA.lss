
Hackathlon-HA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  000018cc  00001960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fc  00800232  00800232  00001a92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003286  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce2  00000000  00000000  00004f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b3  00000000  00000000  00005c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  00006df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b80  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b64  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000abc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_18>
      4c:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 32       	cpi	r26, 0x2E	; 46
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 55 09 	call	0x12aa	; 0x12aa <main>
      9e:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <null_ptr_check>:
		if (rslt == BME280_OK)
			parse_device_settings(reg_data, &dev->settings);
	}

	return rslt;
}
      a6:	fc 01       	movw	r30, r24
      a8:	89 2b       	or	r24, r25
      aa:	81 f0       	breq	.+32     	; 0xcc <null_ptr_check+0x26>
      ac:	83 81       	ldd	r24, Z+3	; 0x03
      ae:	94 81       	ldd	r25, Z+4	; 0x04
      b0:	89 2b       	or	r24, r25
      b2:	71 f0       	breq	.+28     	; 0xd0 <null_ptr_check+0x2a>
      b4:	85 81       	ldd	r24, Z+5	; 0x05
      b6:	96 81       	ldd	r25, Z+6	; 0x06
      b8:	89 2b       	or	r24, r25
      ba:	61 f0       	breq	.+24     	; 0xd4 <null_ptr_check+0x2e>
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	27 81       	ldd	r18, Z+7	; 0x07
      c0:	30 85       	ldd	r19, Z+8	; 0x08
      c2:	23 2b       	or	r18, r19
      c4:	09 f0       	breq	.+2      	; 0xc8 <null_ptr_check+0x22>
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	81 95       	neg	r24
      ca:	08 95       	ret
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	08 95       	ret
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	08 95       	ret
      d4:	8f ef       	ldi	r24, 0xFF	; 255
      d6:	08 95       	ret

000000d8 <bme280_get_regs>:
      d8:	cf 92       	push	r12
      da:	df 92       	push	r13
      dc:	ef 92       	push	r14
      de:	ff 92       	push	r15
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	18 2f       	mov	r17, r24
      e8:	7b 01       	movw	r14, r22
      ea:	6a 01       	movw	r12, r20
      ec:	e9 01       	movw	r28, r18
      ee:	c9 01       	movw	r24, r18
      f0:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>
      f4:	81 11       	cpse	r24, r1
      f6:	0d c0       	rjmp	.+26     	; 0x112 <bme280_get_regs+0x3a>
      f8:	8a 81       	ldd	r24, Y+2	; 0x02
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	09 f0       	breq	.+2      	; 0x100 <bme280_get_regs+0x28>
      fe:	10 68       	ori	r17, 0x80	; 128
     100:	eb 81       	ldd	r30, Y+3	; 0x03
     102:	fc 81       	ldd	r31, Y+4	; 0x04
     104:	96 01       	movw	r18, r12
     106:	a7 01       	movw	r20, r14
     108:	61 2f       	mov	r22, r17
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	09 95       	icall
     10e:	81 11       	cpse	r24, r1
     110:	8c ef       	ldi	r24, 0xFC	; 252
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	1f 91       	pop	r17
     118:	ff 90       	pop	r15
     11a:	ef 90       	pop	r14
     11c:	df 90       	pop	r13
     11e:	cf 90       	pop	r12
     120:	08 95       	ret

00000122 <bme280_set_regs>:
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	64 97       	sbiw	r28, 0x14	; 20
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	6c 01       	movw	r12, r24
     146:	8b 01       	movw	r16, r22
     148:	79 01       	movw	r14, r18
     14a:	b4 2e       	mov	r11, r20
     14c:	8a e0       	ldi	r24, 0x0A	; 10
     14e:	84 17       	cp	r24, r20
     150:	20 f4       	brcc	.+8      	; 0x15a <bme280_set_regs+0x38>
     152:	0f 2e       	mov	r0, r31
     154:	fa e0       	ldi	r31, 0x0A	; 10
     156:	bf 2e       	mov	r11, r31
     158:	f0 2d       	mov	r31, r0
     15a:	c7 01       	movw	r24, r14
     15c:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>
     160:	81 11       	cpse	r24, r1
     162:	53 c0       	rjmp	.+166    	; 0x20a <bme280_set_regs+0xe8>
     164:	c1 14       	cp	r12, r1
     166:	d1 04       	cpc	r13, r1
     168:	09 f4       	brne	.+2      	; 0x16c <bme280_set_regs+0x4a>
     16a:	51 c0       	rjmp	.+162    	; 0x20e <bme280_set_regs+0xec>
     16c:	01 15       	cp	r16, r1
     16e:	11 05       	cpc	r17, r1
     170:	09 f4       	brne	.+2      	; 0x174 <bme280_set_regs+0x52>
     172:	4f c0       	rjmp	.+158    	; 0x212 <bme280_set_regs+0xf0>
     174:	bb 20       	and	r11, r11
     176:	09 f4       	brne	.+2      	; 0x17a <bme280_set_regs+0x58>
     178:	4e c0       	rjmp	.+156    	; 0x216 <bme280_set_regs+0xf4>
     17a:	d8 01       	movw	r26, r16
     17c:	8c 91       	ld	r24, X
     17e:	89 83       	std	Y+1, r24	; 0x01
     180:	f7 01       	movw	r30, r14
     182:	82 81       	ldd	r24, Z+2	; 0x02
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	09 f4       	brne	.+2      	; 0x18a <bme280_set_regs+0x68>
     188:	48 c0       	rjmp	.+144    	; 0x21a <bme280_set_regs+0xf8>
     18a:	f6 01       	movw	r30, r12
     18c:	2f ef       	ldi	r18, 0xFF	; 255
     18e:	2b 0d       	add	r18, r11
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	2f 5f       	subi	r18, 0xFF	; 255
     194:	3f 4f       	sbci	r19, 0xFF	; 255
     196:	2c 0d       	add	r18, r12
     198:	3d 1d       	adc	r19, r13
     19a:	80 81       	ld	r24, Z
     19c:	8f 77       	andi	r24, 0x7F	; 127
     19e:	81 93       	st	Z+, r24
     1a0:	e2 17       	cp	r30, r18
     1a2:	f3 07       	cpc	r31, r19
     1a4:	d1 f7       	brne	.-12     	; 0x19a <bme280_set_regs+0x78>
     1a6:	f1 e0       	ldi	r31, 0x01	; 1
     1a8:	fb 15       	cp	r31, r11
     1aa:	d8 f4       	brcc	.+54     	; 0x1e2 <bme280_set_regs+0xc0>
     1ac:	96 01       	movw	r18, r12
     1ae:	2f 5f       	subi	r18, 0xFF	; 255
     1b0:	3f 4f       	sbci	r19, 0xFF	; 255
     1b2:	fe 01       	movw	r30, r28
     1b4:	31 96       	adiw	r30, 0x01	; 1
     1b6:	0f 5f       	subi	r16, 0xFF	; 255
     1b8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	d9 01       	movw	r26, r18
     1be:	9d 91       	ld	r25, X+
     1c0:	9d 01       	movw	r18, r26
     1c2:	91 83       	std	Z+1, r25	; 0x01
     1c4:	d8 01       	movw	r26, r16
     1c6:	9d 91       	ld	r25, X+
     1c8:	8d 01       	movw	r16, r26
     1ca:	92 83       	std	Z+2, r25	; 0x02
     1cc:	8f 5f       	subi	r24, 0xFF	; 255
     1ce:	32 96       	adiw	r30, 0x02	; 2
     1d0:	8b 15       	cp	r24, r11
     1d2:	a0 f3       	brcs	.-24     	; 0x1bc <bme280_set_regs+0x9a>
     1d4:	2b 2d       	mov	r18, r11
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	21 50       	subi	r18, 0x01	; 1
     1de:	31 09       	sbc	r19, r1
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <bme280_set_regs+0xc4>
     1e2:	2b 2d       	mov	r18, r11
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	d7 01       	movw	r26, r14
     1e8:	15 96       	adiw	r26, 0x05	; 5
     1ea:	ed 91       	ld	r30, X+
     1ec:	fc 91       	ld	r31, X
     1ee:	16 97       	sbiw	r26, 0x06	; 6
     1f0:	ae 01       	movw	r20, r28
     1f2:	4f 5f       	subi	r20, 0xFF	; 255
     1f4:	5f 4f       	sbci	r21, 0xFF	; 255
     1f6:	d6 01       	movw	r26, r12
     1f8:	6c 91       	ld	r22, X
     1fa:	d7 01       	movw	r26, r14
     1fc:	11 96       	adiw	r26, 0x01	; 1
     1fe:	8c 91       	ld	r24, X
     200:	09 95       	icall
     202:	88 23       	and	r24, r24
     204:	71 f0       	breq	.+28     	; 0x222 <bme280_set_regs+0x100>
     206:	8c ef       	ldi	r24, 0xFC	; 252
     208:	0c c0       	rjmp	.+24     	; 0x222 <bme280_set_regs+0x100>
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	0a c0       	rjmp	.+20     	; 0x222 <bme280_set_regs+0x100>
     20e:	8f ef       	ldi	r24, 0xFF	; 255
     210:	08 c0       	rjmp	.+16     	; 0x222 <bme280_set_regs+0x100>
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	06 c0       	rjmp	.+12     	; 0x222 <bme280_set_regs+0x100>
     216:	8d ef       	ldi	r24, 0xFD	; 253
     218:	04 c0       	rjmp	.+8      	; 0x222 <bme280_set_regs+0x100>
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	bb 15       	cp	r27, r11
     21e:	30 f2       	brcs	.-116    	; 0x1ac <bme280_set_regs+0x8a>
     220:	e0 cf       	rjmp	.-64     	; 0x1e2 <bme280_set_regs+0xc0>
     222:	64 96       	adiw	r28, 0x14	; 20
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	ff 90       	pop	r15
     238:	ef 90       	pop	r14
     23a:	df 90       	pop	r13
     23c:	cf 90       	pop	r12
     23e:	bf 90       	pop	r11
     240:	08 95       	ret

00000242 <set_osr_settings>:
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	00 d0       	rcall	.+0      	; 0x252 <set_osr_settings+0x10>
     252:	1f 92       	push	r1
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	18 2f       	mov	r17, r24
     25a:	6b 01       	movw	r12, r22
     25c:	7a 01       	movw	r14, r20
     25e:	82 ff       	sbrs	r24, 2
     260:	27 c0       	rjmp	.+78     	; 0x2b0 <set_osr_settings+0x6e>
     262:	82 ef       	ldi	r24, 0xF2	; 242
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	fb 01       	movw	r30, r22
     268:	82 81       	ldd	r24, Z+2	; 0x02
     26a:	87 70       	andi	r24, 0x07	; 7
     26c:	8b 83       	std	Y+3, r24	; 0x03
     26e:	9a 01       	movw	r18, r20
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	be 01       	movw	r22, r28
     274:	6d 5f       	subi	r22, 0xFD	; 253
     276:	7f 4f       	sbci	r23, 0xFF	; 255
     278:	ce 01       	movw	r24, r28
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	0e 94 91 00 	call	0x122	; 0x122 <bme280_set_regs>
     280:	81 11       	cpse	r24, r1
     282:	17 c0       	rjmp	.+46     	; 0x2b2 <set_osr_settings+0x70>
     284:	84 ef       	ldi	r24, 0xF4	; 244
     286:	89 83       	std	Y+1, r24	; 0x01
     288:	97 01       	movw	r18, r14
     28a:	41 e0       	ldi	r20, 0x01	; 1
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	be 01       	movw	r22, r28
     290:	6e 5f       	subi	r22, 0xFE	; 254
     292:	7f 4f       	sbci	r23, 0xFF	; 255
     294:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
     298:	81 11       	cpse	r24, r1
     29a:	0b c0       	rjmp	.+22     	; 0x2b2 <set_osr_settings+0x70>
     29c:	97 01       	movw	r18, r14
     29e:	41 e0       	ldi	r20, 0x01	; 1
     2a0:	be 01       	movw	r22, r28
     2a2:	6e 5f       	subi	r22, 0xFE	; 254
     2a4:	7f 4f       	sbci	r23, 0xFF	; 255
     2a6:	ce 01       	movw	r24, r28
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	0e 94 91 00 	call	0x122	; 0x122 <bme280_set_regs>
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <set_osr_settings+0x70>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	91 2f       	mov	r25, r17
     2b4:	93 70       	andi	r25, 0x03	; 3
     2b6:	71 f1       	breq	.+92     	; 0x314 <set_osr_settings+0xd2>
     2b8:	84 ef       	ldi	r24, 0xF4	; 244
     2ba:	8a 83       	std	Y+2, r24	; 0x02
     2bc:	97 01       	movw	r18, r14
     2be:	41 e0       	ldi	r20, 0x01	; 1
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	be 01       	movw	r22, r28
     2c4:	6f 5f       	subi	r22, 0xFF	; 255
     2c6:	7f 4f       	sbci	r23, 0xFF	; 255
     2c8:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
     2cc:	81 11       	cpse	r24, r1
     2ce:	22 c0       	rjmp	.+68     	; 0x314 <set_osr_settings+0xd2>
     2d0:	10 ff       	sbrs	r17, 0
     2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <set_osr_settings+0xa6>
     2d4:	f6 01       	movw	r30, r12
     2d6:	80 81       	ld	r24, Z
     2d8:	88 0f       	add	r24, r24
     2da:	88 0f       	add	r24, r24
     2dc:	98 2f       	mov	r25, r24
     2de:	9c 71       	andi	r25, 0x1C	; 28
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	83 7e       	andi	r24, 0xE3	; 227
     2e4:	89 2b       	or	r24, r25
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	11 ff       	sbrs	r17, 1
     2ea:	0b c0       	rjmp	.+22     	; 0x302 <set_osr_settings+0xc0>
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	28 2f       	mov	r18, r24
     2f0:	2f 71       	andi	r18, 0x1F	; 31
     2f2:	f6 01       	movw	r30, r12
     2f4:	91 81       	ldd	r25, Z+1	; 0x01
     2f6:	f0 e2       	ldi	r31, 0x20	; 32
     2f8:	9f 9f       	mul	r25, r31
     2fa:	c0 01       	movw	r24, r0
     2fc:	11 24       	eor	r1, r1
     2fe:	82 2b       	or	r24, r18
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	97 01       	movw	r18, r14
     304:	41 e0       	ldi	r20, 0x01	; 1
     306:	be 01       	movw	r22, r28
     308:	6f 5f       	subi	r22, 0xFF	; 255
     30a:	7f 4f       	sbci	r23, 0xFF	; 255
     30c:	ce 01       	movw	r24, r28
     30e:	02 96       	adiw	r24, 0x02	; 2
     310:	0e 94 91 00 	call	0x122	; 0x122 <bme280_set_regs>
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	08 95       	ret

0000032a <set_filter_standby_settings>:
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <set_filter_standby_settings+0x10>
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	f8 2e       	mov	r15, r24
     340:	6b 01       	movw	r12, r22
     342:	8a 01       	movw	r16, r20
     344:	85 ef       	ldi	r24, 0xF5	; 245
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	9a 01       	movw	r18, r20
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	be 01       	movw	r22, r28
     350:	6e 5f       	subi	r22, 0xFE	; 254
     352:	7f 4f       	sbci	r23, 0xFF	; 255
     354:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
     358:	81 11       	cpse	r24, r1
     35a:	22 c0       	rjmp	.+68     	; 0x3a0 <set_filter_standby_settings+0x76>
     35c:	f3 fe       	sbrs	r15, 3
     35e:	0a c0       	rjmp	.+20     	; 0x374 <set_filter_standby_settings+0x4a>
     360:	f6 01       	movw	r30, r12
     362:	83 81       	ldd	r24, Z+3	; 0x03
     364:	88 0f       	add	r24, r24
     366:	88 0f       	add	r24, r24
     368:	98 2f       	mov	r25, r24
     36a:	9c 71       	andi	r25, 0x1C	; 28
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	83 7e       	andi	r24, 0xE3	; 227
     370:	89 2b       	or	r24, r25
     372:	8a 83       	std	Y+2, r24	; 0x02
     374:	f4 fe       	sbrs	r15, 4
     376:	0b c0       	rjmp	.+22     	; 0x38e <set_filter_standby_settings+0x64>
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	28 2f       	mov	r18, r24
     37c:	2f 71       	andi	r18, 0x1F	; 31
     37e:	f6 01       	movw	r30, r12
     380:	94 81       	ldd	r25, Z+4	; 0x04
     382:	f0 e2       	ldi	r31, 0x20	; 32
     384:	9f 9f       	mul	r25, r31
     386:	c0 01       	movw	r24, r0
     388:	11 24       	eor	r1, r1
     38a:	82 2b       	or	r24, r18
     38c:	8a 83       	std	Y+2, r24	; 0x02
     38e:	98 01       	movw	r18, r16
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	be 01       	movw	r22, r28
     394:	6e 5f       	subi	r22, 0xFE	; 254
     396:	7f 4f       	sbci	r23, 0xFF	; 255
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 91 00 	call	0x122	; 0x122 <bme280_set_regs>
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	8c 01       	movw	r16, r24
     3be:	eb 01       	movw	r28, r22
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     3c0:	cb 01       	movw	r24, r22
     3c2:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>

	if (rslt == BME280_OK) {
     3c6:	81 11       	cpse	r24, r1
     3c8:	0b c0       	rjmp	.+22     	; 0x3e0 <bme280_get_sensor_mode+0x2c>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
     3ca:	9e 01       	movw	r18, r28
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	b8 01       	movw	r22, r16
     3d2:	84 ef       	ldi	r24, 0xF4	; 244
     3d4:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
     3d8:	f8 01       	movw	r30, r16
     3da:	90 81       	ld	r25, Z
     3dc:	93 70       	andi	r25, 0x03	; 3
     3de:	90 83       	st	Z, r25
	}

	return rslt;
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	08 95       	ret

000003ea <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <bme280_soft_reset+0xc>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	7c 01       	movw	r14, r24
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
     3fc:	80 ee       	ldi	r24, 0xE0	; 224
     3fe:	89 83       	std	Y+1, r24	; 0x01
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
     400:	86 eb       	ldi	r24, 0xB6	; 182
     402:	8a 83       	std	Y+2, r24	; 0x02

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     404:	c7 01       	movw	r24, r14
     406:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>
     40a:	18 2f       	mov	r17, r24
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
     40c:	81 11       	cpse	r24, r1
     40e:	14 c0       	rjmp	.+40     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     410:	97 01       	movw	r18, r14
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	be 01       	movw	r22, r28
     416:	6e 5f       	subi	r22, 0xFE	; 254
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	0e 94 91 00 	call	0x122	; 0x122 <bme280_set_regs>
     422:	18 2f       	mov	r17, r24
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
     424:	d7 01       	movw	r26, r14
     426:	17 96       	adiw	r26, 0x07	; 7
     428:	ed 91       	ld	r30, X+
     42a:	fc 91       	ld	r31, X
     42c:	18 97       	sbiw	r26, 0x08	; 8
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	09 95       	icall
	}

	return rslt;
}
     438:	81 2f       	mov	r24, r17
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	08 95       	ret

0000044a <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	6b 97       	sbiw	r28, 0x1b	; 27
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	7c 01       	movw	r14, r24
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
	uint8_t chip_id = 0;
     466:	19 82       	std	Y+1, r1	; 0x01

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     468:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
     46c:	81 11       	cpse	r24, r1
     46e:	e7 c0       	rjmp	.+462    	; 0x63e <bme280_init+0x1f4>
     470:	15 e0       	ldi	r17, 0x05	; 5
		while (try_count) {
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
     472:	97 01       	movw	r18, r14
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	be 01       	movw	r22, r28
     47a:	6f 5f       	subi	r22, 0xFF	; 255
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	80 ed       	ldi	r24, 0xD0	; 208
     480:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
     484:	81 11       	cpse	r24, r1
     486:	c9 c0       	rjmp	.+402    	; 0x61a <bme280_init+0x1d0>
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	80 36       	cpi	r24, 0x60	; 96
     48c:	09 f0       	breq	.+2      	; 0x490 <bme280_init+0x46>
     48e:	c5 c0       	rjmp	.+394    	; 0x61a <bme280_init+0x1d0>
				dev->chip_id = chip_id;
     490:	d7 01       	movw	r26, r14
     492:	8c 93       	st	X, r24
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
     494:	c7 01       	movw	r24, r14
     496:	0e 94 f5 01 	call	0x3ea	; 0x3ea <bme280_soft_reset>
				if (rslt == BME280_OK) {
     49a:	81 11       	cpse	r24, r1
     49c:	cd c0       	rjmp	.+410    	; 0x638 <bme280_init+0x1ee>
static int8_t get_calib_data(struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
     49e:	be 01       	movw	r22, r28
     4a0:	6e 5f       	subi	r22, 0xFE	; 254
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	8a e1       	ldi	r24, 0x1A	; 26
     4a6:	fb 01       	movw	r30, r22
     4a8:	11 92       	st	Z+, r1
     4aa:	8a 95       	dec	r24
     4ac:	e9 f7       	brne	.-6      	; 0x4a8 <bme280_init+0x5e>

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
     4ae:	97 01       	movw	r18, r14
     4b0:	4a e1       	ldi	r20, 0x1A	; 26
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	88 e8       	ldi	r24, 0x88	; 136
     4b6:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>

	if (rslt == BME280_OK) {
     4ba:	81 11       	cpse	r24, r1
     4bc:	bd c0       	rjmp	.+378    	; 0x638 <bme280_init+0x1ee>
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
	struct bme280_calib_data *calib_data = &dev->calib_data;

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	98 2f       	mov	r25, r24
     4c4:	88 27       	eor	r24, r24
     4c6:	2a 81       	ldd	r18, Y+2	; 0x02
     4c8:	82 2b       	or	r24, r18
     4ca:	d7 01       	movw	r26, r14
     4cc:	1a 96       	adiw	r26, 0x0a	; 10
     4ce:	9c 93       	st	X, r25
     4d0:	8e 93       	st	-X, r24
     4d2:	19 97       	sbiw	r26, 0x09	; 9
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
     4d4:	8d 81       	ldd	r24, Y+5	; 0x05
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	98 2f       	mov	r25, r24
     4da:	88 27       	eor	r24, r24
     4dc:	2c 81       	ldd	r18, Y+4	; 0x04
     4de:	82 2b       	or	r24, r18
     4e0:	1c 96       	adiw	r26, 0x0c	; 12
     4e2:	9c 93       	st	X, r25
     4e4:	8e 93       	st	-X, r24
     4e6:	1b 97       	sbiw	r26, 0x0b	; 11
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
     4e8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	98 2f       	mov	r25, r24
     4ee:	88 27       	eor	r24, r24
     4f0:	2e 81       	ldd	r18, Y+6	; 0x06
     4f2:	82 2b       	or	r24, r18
     4f4:	1e 96       	adiw	r26, 0x0e	; 14
     4f6:	9c 93       	st	X, r25
     4f8:	8e 93       	st	-X, r24
     4fa:	1d 97       	sbiw	r26, 0x0d	; 13
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
     4fc:	89 85       	ldd	r24, Y+9	; 0x09
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	98 2f       	mov	r25, r24
     502:	88 27       	eor	r24, r24
     504:	28 85       	ldd	r18, Y+8	; 0x08
     506:	82 2b       	or	r24, r18
     508:	50 96       	adiw	r26, 0x10	; 16
     50a:	9c 93       	st	X, r25
     50c:	8e 93       	st	-X, r24
     50e:	1f 97       	sbiw	r26, 0x0f	; 15
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
     510:	8b 85       	ldd	r24, Y+11	; 0x0b
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	98 2f       	mov	r25, r24
     516:	88 27       	eor	r24, r24
     518:	2a 85       	ldd	r18, Y+10	; 0x0a
     51a:	82 2b       	or	r24, r18
     51c:	52 96       	adiw	r26, 0x12	; 18
     51e:	9c 93       	st	X, r25
     520:	8e 93       	st	-X, r24
     522:	51 97       	sbiw	r26, 0x11	; 17
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
     524:	8d 85       	ldd	r24, Y+13	; 0x0d
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	98 2f       	mov	r25, r24
     52a:	88 27       	eor	r24, r24
     52c:	2c 85       	ldd	r18, Y+12	; 0x0c
     52e:	82 2b       	or	r24, r18
     530:	54 96       	adiw	r26, 0x14	; 20
     532:	9c 93       	st	X, r25
     534:	8e 93       	st	-X, r24
     536:	53 97       	sbiw	r26, 0x13	; 19
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
     538:	8f 85       	ldd	r24, Y+15	; 0x0f
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	98 2f       	mov	r25, r24
     53e:	88 27       	eor	r24, r24
     540:	2e 85       	ldd	r18, Y+14	; 0x0e
     542:	82 2b       	or	r24, r18
     544:	56 96       	adiw	r26, 0x16	; 22
     546:	9c 93       	st	X, r25
     548:	8e 93       	st	-X, r24
     54a:	55 97       	sbiw	r26, 0x15	; 21
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
     54c:	89 89       	ldd	r24, Y+17	; 0x11
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	98 2f       	mov	r25, r24
     552:	88 27       	eor	r24, r24
     554:	28 89       	ldd	r18, Y+16	; 0x10
     556:	82 2b       	or	r24, r18
     558:	58 96       	adiw	r26, 0x18	; 24
     55a:	9c 93       	st	X, r25
     55c:	8e 93       	st	-X, r24
     55e:	57 97       	sbiw	r26, 0x17	; 23
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
     560:	8b 89       	ldd	r24, Y+19	; 0x13
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	98 2f       	mov	r25, r24
     566:	88 27       	eor	r24, r24
     568:	2a 89       	ldd	r18, Y+18	; 0x12
     56a:	82 2b       	or	r24, r18
     56c:	5a 96       	adiw	r26, 0x1a	; 26
     56e:	9c 93       	st	X, r25
     570:	8e 93       	st	-X, r24
     572:	59 97       	sbiw	r26, 0x19	; 25
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
     574:	8d 89       	ldd	r24, Y+21	; 0x15
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	98 2f       	mov	r25, r24
     57a:	88 27       	eor	r24, r24
     57c:	2c 89       	ldd	r18, Y+20	; 0x14
     57e:	82 2b       	or	r24, r18
     580:	5c 96       	adiw	r26, 0x1c	; 28
     582:	9c 93       	st	X, r25
     584:	8e 93       	st	-X, r24
     586:	5b 97       	sbiw	r26, 0x1b	; 27
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
     588:	8f 89       	ldd	r24, Y+23	; 0x17
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	98 2f       	mov	r25, r24
     58e:	88 27       	eor	r24, r24
     590:	2e 89       	ldd	r18, Y+22	; 0x16
     592:	82 2b       	or	r24, r18
     594:	5e 96       	adiw	r26, 0x1e	; 30
     596:	9c 93       	st	X, r25
     598:	8e 93       	st	-X, r24
     59a:	5d 97       	sbiw	r26, 0x1d	; 29
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
     59c:	89 8d       	ldd	r24, Y+25	; 0x19
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	98 2f       	mov	r25, r24
     5a2:	88 27       	eor	r24, r24
     5a4:	28 8d       	ldd	r18, Y+24	; 0x18
     5a6:	82 2b       	or	r24, r18
     5a8:	90 96       	adiw	r26, 0x20	; 32
     5aa:	9c 93       	st	X, r25
     5ac:	8e 93       	st	-X, r24
     5ae:	5f 97       	sbiw	r26, 0x1f	; 31
	calib_data->dig_H1 = reg_data[25];
     5b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5b2:	91 96       	adiw	r26, 0x21	; 33
     5b4:	8c 93       	st	X, r24
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
     5b6:	97 01       	movw	r18, r14
     5b8:	47 e0       	ldi	r20, 0x07	; 7
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	be 01       	movw	r22, r28
     5be:	6e 5f       	subi	r22, 0xFE	; 254
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	81 ee       	ldi	r24, 0xE1	; 225
     5c4:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
		if (rslt == BME280_OK) {
     5c8:	81 11       	cpse	r24, r1
     5ca:	36 c0       	rjmp	.+108    	; 0x638 <bme280_init+0x1ee>
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
     5cc:	2b 81       	ldd	r18, Y+3	; 0x03
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	32 2f       	mov	r19, r18
     5d2:	22 27       	eor	r18, r18
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	29 2b       	or	r18, r25
     5d8:	f7 01       	movw	r30, r14
     5da:	33 a3       	std	Z+35, r19	; 0x23
     5dc:	22 a3       	std	Z+34, r18	; 0x22
	calib_data->dig_H3 = reg_data[2];
     5de:	9c 81       	ldd	r25, Y+4	; 0x04
     5e0:	94 a3       	std	Z+36, r25	; 0x24

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
     5e2:	9e 81       	ldd	r25, Y+6	; 0x06
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
     5e4:	2d 81       	ldd	r18, Y+5	; 0x05
     5e6:	f0 e1       	ldi	r31, 0x10	; 16
     5e8:	2f 02       	muls	r18, r31
     5ea:	90 01       	movw	r18, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	49 2f       	mov	r20, r25
     5f0:	4f 70       	andi	r20, 0x0F	; 15
     5f2:	24 2b       	or	r18, r20
     5f4:	d7 01       	movw	r26, r14
     5f6:	96 96       	adiw	r26, 0x26	; 38
     5f8:	3c 93       	st	X, r19
     5fa:	2e 93       	st	-X, r18
     5fc:	95 97       	sbiw	r26, 0x25	; 37

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
     5fe:	2f 81       	ldd	r18, Y+7	; 0x07
     600:	b0 e1       	ldi	r27, 0x10	; 16
     602:	2b 02       	muls	r18, r27
     604:	90 01       	movw	r18, r0
     606:	11 24       	eor	r1, r1
     608:	92 95       	swap	r25
     60a:	9f 70       	andi	r25, 0x0F	; 15
     60c:	29 2b       	or	r18, r25
     60e:	f7 01       	movw	r30, r14
     610:	30 a7       	std	Z+40, r19	; 0x28
     612:	27 a3       	std	Z+39, r18	; 0x27
	calib_data->dig_H6 = (int8_t)reg_data[6];
     614:	98 85       	ldd	r25, Y+8	; 0x08
     616:	91 a7       	std	Z+41, r25	; 0x29
     618:	0f c0       	rjmp	.+30     	; 0x638 <bme280_init+0x1ee>
					rslt = get_calib_data(dev);
				}
				break;
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
     61a:	d7 01       	movw	r26, r14
     61c:	17 96       	adiw	r26, 0x07	; 7
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	18 97       	sbiw	r26, 0x08	; 8
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	09 95       	icall
     62e:	11 50       	subi	r17, 0x01	; 1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
		while (try_count) {
     630:	09 f0       	breq	.+2      	; 0x634 <bme280_init+0x1ea>
     632:	1f cf       	rjmp	.-450    	; 0x472 <bme280_init+0x28>
			dev->delay_ms(1);
			--try_count;
		}
		/* Chip id check failed */
		if (!try_count)
			rslt = BME280_E_DEV_NOT_FOUND;
     634:	8e ef       	ldi	r24, 0xFE	; 254
     636:	03 c0       	rjmp	.+6      	; 0x63e <bme280_init+0x1f4>
			/* Wait for 1 ms */
			dev->delay_ms(1);
			--try_count;
		}
		/* Chip id check failed */
		if (!try_count)
     638:	11 11       	cpse	r17, r1
     63a:	01 c0       	rjmp	.+2      	; 0x63e <bme280_init+0x1f4>
			rslt = BME280_E_DEV_NOT_FOUND;
     63c:	8e ef       	ldi	r24, 0xFE	; 254
	}

	return rslt;
}
     63e:	6b 96       	adiw	r28, 0x1b	; 27
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	08 95       	ret

00000656 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	29 97       	sbiw	r28, 0x09	; 9
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	8c 01       	movw	r16, r24
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
     670:	9c 01       	movw	r18, r24
     672:	44 e0       	ldi	r20, 0x04	; 4
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	82 ef       	ldi	r24, 0xF2	; 242
     67e:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
	if (rslt == BME280_OK) {
     682:	81 11       	cpse	r24, r1
     684:	32 c0       	rjmp	.+100    	; 0x6ea <put_device_to_sleep+0x94>
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	87 70       	andi	r24, 0x07	; 7
     68a:	8f 83       	std	Y+7, r24	; 0x07
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
     68c:	2b 81       	ldd	r18, Y+3	; 0x03
     68e:	82 2f       	mov	r24, r18
     690:	8c 71       	andi	r24, 0x1C	; 28
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	95 95       	asr	r25
     696:	87 95       	ror	r24
     698:	95 95       	asr	r25
     69a:	87 95       	ror	r24
     69c:	8d 83       	std	Y+5, r24	; 0x05
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
     69e:	22 95       	swap	r18
     6a0:	26 95       	lsr	r18
     6a2:	27 70       	andi	r18, 0x07	; 7
     6a4:	2e 83       	std	Y+6, r18	; 0x06
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
     6a6:	2c 81       	ldd	r18, Y+4	; 0x04
     6a8:	82 2f       	mov	r24, r18
     6aa:	8c 71       	andi	r24, 0x1C	; 28
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	95 95       	asr	r25
     6b0:	87 95       	ror	r24
     6b2:	95 95       	asr	r25
     6b4:	87 95       	ror	r24
     6b6:	88 87       	std	Y+8, r24	; 0x08
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
     6b8:	22 95       	swap	r18
     6ba:	26 95       	lsr	r18
     6bc:	27 70       	andi	r18, 0x07	; 7
     6be:	29 87       	std	Y+9, r18	; 0x09
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
	if (rslt == BME280_OK) {
		parse_device_settings(reg_data, &settings);
		rslt = bme280_soft_reset(dev);
     6c0:	c8 01       	movw	r24, r16
     6c2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <bme280_soft_reset>
		if (rslt == BME280_OK)
     6c6:	81 11       	cpse	r24, r1
     6c8:	10 c0       	rjmp	.+32     	; 0x6ea <put_device_to_sleep+0x94>
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
     6ca:	a8 01       	movw	r20, r16
     6cc:	be 01       	movw	r22, r28
     6ce:	6b 5f       	subi	r22, 0xFB	; 251
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	8f e1       	ldi	r24, 0x1F	; 31
     6d4:	0e 94 21 01 	call	0x242	; 0x242 <set_osr_settings>
	if (rslt == BME280_OK)
     6d8:	81 11       	cpse	r24, r1
     6da:	07 c0       	rjmp	.+14     	; 0x6ea <put_device_to_sleep+0x94>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
     6dc:	a8 01       	movw	r20, r16
     6de:	be 01       	movw	r22, r28
     6e0:	6b 5f       	subi	r22, 0xFB	; 251
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	8f e1       	ldi	r24, 0x1F	; 31
     6e6:	0e 94 95 01 	call	0x32a	; 0x32a <set_filter_standby_settings>
		if (rslt == BME280_OK)
			rslt = reload_device_settings(&settings, dev);
	}

	return rslt;
}
     6ea:	29 96       	adiw	r28, 0x09	; 9
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	1f 92       	push	r1
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	08 2f       	mov	r16, r24
     714:	7b 01       	movw	r14, r22
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     716:	cb 01       	movw	r24, r22
     718:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>
     71c:	18 2f       	mov	r17, r24
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
     71e:	81 11       	cpse	r24, r1
     720:	2b c0       	rjmp	.+86     	; 0x778 <bme280_set_sensor_settings+0x78>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
     722:	b7 01       	movw	r22, r14
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	0e 94 da 01 	call	0x3b4	; 0x3b4 <bme280_get_sensor_mode>
     72c:	18 2f       	mov	r17, r24
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
     72e:	81 11       	cpse	r24, r1
     730:	23 c0       	rjmp	.+70     	; 0x778 <bme280_set_sensor_settings+0x78>
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	88 23       	and	r24, r24
     736:	29 f0       	breq	.+10     	; 0x742 <bme280_set_sensor_settings+0x42>
			rslt = put_device_to_sleep(dev);
     738:	c7 01       	movw	r24, r14
     73a:	0e 94 2b 03 	call	0x656	; 0x656 <put_device_to_sleep>
		if (rslt == BME280_OK) {
     73e:	81 11       	cpse	r24, r1
     740:	18 c0       	rjmp	.+48     	; 0x772 <bme280_set_sensor_settings+0x72>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
     742:	80 2f       	mov	r24, r16
     744:	87 70       	andi	r24, 0x07	; 7
     746:	49 f0       	breq	.+18     	; 0x75a <bme280_set_sensor_settings+0x5a>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
     748:	a7 01       	movw	r20, r14
     74a:	b7 01       	movw	r22, r14
     74c:	62 5d       	subi	r22, 0xD2	; 210
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	80 2f       	mov	r24, r16
     752:	0e 94 21 01 	call	0x242	; 0x242 <set_osr_settings>
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
     756:	81 11       	cpse	r24, r1
     758:	0e c0       	rjmp	.+28     	; 0x776 <bme280_set_sensor_settings+0x76>
     75a:	80 2f       	mov	r24, r16
     75c:	88 71       	andi	r24, 0x18	; 24
     75e:	61 f0       	breq	.+24     	; 0x778 <bme280_set_sensor_settings+0x78>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
     760:	b7 01       	movw	r22, r14
     762:	62 5d       	subi	r22, 0xD2	; 210
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	a7 01       	movw	r20, r14
     768:	80 2f       	mov	r24, r16
     76a:	0e 94 95 01 	call	0x32a	; 0x32a <set_filter_standby_settings>
     76e:	18 2f       	mov	r17, r24
     770:	03 c0       	rjmp	.+6      	; 0x778 <bme280_set_sensor_settings+0x78>
	rslt = null_ptr_check(dev);
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
			rslt = put_device_to_sleep(dev);
     772:	18 2f       	mov	r17, r24
     774:	01 c0       	rjmp	.+2      	; 0x778 <bme280_set_sensor_settings+0x78>
		if (rslt == BME280_OK) {
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
     776:	18 2f       	mov	r17, r24
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
		}
	}

	return rslt;
}
     778:	81 2f       	mov	r24, r17
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	08 95       	ret

0000078a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	00 d0       	rcall	.+0      	; 0x796 <bme280_set_sensor_mode+0xc>
     796:	1f 92       	push	r1
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	f8 2e       	mov	r15, r24
     79e:	8b 01       	movw	r16, r22
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
     7a0:	cb 01       	movw	r24, r22
     7a2:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>

	if (rslt == BME280_OK) {
     7a6:	81 11       	cpse	r24, r1
     7a8:	2b c0       	rjmp	.+86     	; 0x800 <bme280_set_sensor_mode+0x76>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
     7aa:	b8 01       	movw	r22, r16
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <bme280_get_sensor_mode>
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
     7b4:	81 11       	cpse	r24, r1
     7b6:	24 c0       	rjmp	.+72     	; 0x800 <bme280_set_sensor_mode+0x76>
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	88 23       	and	r24, r24
     7bc:	29 f0       	breq	.+10     	; 0x7c8 <bme280_set_sensor_mode+0x3e>
			rslt = put_device_to_sleep(dev);
     7be:	c8 01       	movw	r24, r16
     7c0:	0e 94 2b 03 	call	0x656	; 0x656 <put_device_to_sleep>
		/* Set the power mode */
		if (rslt == BME280_OK)
     7c4:	81 11       	cpse	r24, r1
     7c6:	1c c0       	rjmp	.+56     	; 0x800 <bme280_set_sensor_mode+0x76>
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
     7c8:	84 ef       	ldi	r24, 0xF4	; 244
     7ca:	8b 83       	std	Y+3, r24	; 0x03
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
     7cc:	98 01       	movw	r18, r16
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	be 01       	movw	r22, r28
     7d4:	6e 5f       	subi	r22, 0xFE	; 254
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>
	/* Set the power mode */
	if (rslt == BME280_OK) {
     7dc:	81 11       	cpse	r24, r1
     7de:	10 c0       	rjmp	.+32     	; 0x800 <bme280_set_sensor_mode+0x76>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	9c 7f       	andi	r25, 0xFC	; 252
     7e4:	8f 2d       	mov	r24, r15
     7e6:	83 70       	andi	r24, 0x03	; 3
     7e8:	f9 2e       	mov	r15, r25
     7ea:	f8 2a       	or	r15, r24
     7ec:	fa 82       	std	Y+2, r15	; 0x02
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
     7ee:	98 01       	movw	r18, r16
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	be 01       	movw	r22, r28
     7f4:	6e 5f       	subi	r22, 0xFE	; 254
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	ce 01       	movw	r24, r28
     7fa:	03 96       	adiw	r24, 0x03	; 3
     7fc:	0e 94 91 00 	call	0x122	; 0x122 <bme280_set_regs>
		if (rslt == BME280_OK)
			rslt = write_power_mode(sensor_mode, dev);
	}

	return rslt;
}
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	08 95       	ret

00000812 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	fc 01       	movw	r30, r24
     818:	db 01       	movw	r26, r22

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
	data_lsb = (uint32_t)reg_data[1] << 4;
	data_xlsb = (uint32_t)reg_data[2] >> 4;
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
     81a:	40 81       	ld	r20, Z
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	8a 01       	movw	r16, r20
     824:	9b 01       	movw	r18, r22
     826:	0f 2e       	mov	r0, r31
     828:	fc e0       	ldi	r31, 0x0C	; 12
     82a:	00 0f       	add	r16, r16
     82c:	11 1f       	adc	r17, r17
     82e:	22 1f       	adc	r18, r18
     830:	33 1f       	adc	r19, r19
     832:	fa 95       	dec	r31
     834:	d1 f7       	brne	.-12     	; 0x82a <bme280_parse_sensor_data+0x18>
     836:	f0 2d       	mov	r31, r0
     838:	81 81       	ldd	r24, Z+1	; 0x01
     83a:	48 2f       	mov	r20, r24
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	44 0f       	add	r20, r20
     844:	55 1f       	adc	r21, r21
     846:	66 1f       	adc	r22, r22
     848:	77 1f       	adc	r23, r23
     84a:	44 0f       	add	r20, r20
     84c:	55 1f       	adc	r21, r21
     84e:	66 1f       	adc	r22, r22
     850:	77 1f       	adc	r23, r23
     852:	44 0f       	add	r20, r20
     854:	55 1f       	adc	r21, r21
     856:	66 1f       	adc	r22, r22
     858:	77 1f       	adc	r23, r23
     85a:	44 0f       	add	r20, r20
     85c:	55 1f       	adc	r21, r21
     85e:	66 1f       	adc	r22, r22
     860:	77 1f       	adc	r23, r23
     862:	40 2b       	or	r20, r16
     864:	51 2b       	or	r21, r17
     866:	62 2b       	or	r22, r18
     868:	73 2b       	or	r23, r19
     86a:	82 81       	ldd	r24, Z+2	; 0x02
     86c:	82 95       	swap	r24
     86e:	8f 70       	andi	r24, 0x0F	; 15
     870:	48 2b       	or	r20, r24
     872:	4d 93       	st	X+, r20
     874:	5d 93       	st	X+, r21
     876:	6d 93       	st	X+, r22
     878:	7c 93       	st	X, r23
     87a:	13 97       	sbiw	r26, 0x03	; 3

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
	data_lsb = (uint32_t)reg_data[4] << 4;
	data_xlsb = (uint32_t)reg_data[5] >> 4;
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
     87c:	43 81       	ldd	r20, Z+3	; 0x03
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	8a 01       	movw	r16, r20
     886:	9b 01       	movw	r18, r22
     888:	0f 2e       	mov	r0, r31
     88a:	fc e0       	ldi	r31, 0x0C	; 12
     88c:	00 0f       	add	r16, r16
     88e:	11 1f       	adc	r17, r17
     890:	22 1f       	adc	r18, r18
     892:	33 1f       	adc	r19, r19
     894:	fa 95       	dec	r31
     896:	d1 f7       	brne	.-12     	; 0x88c <bme280_parse_sensor_data+0x7a>
     898:	f0 2d       	mov	r31, r0
     89a:	84 81       	ldd	r24, Z+4	; 0x04
     89c:	48 2f       	mov	r20, r24
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	66 1f       	adc	r22, r22
     8aa:	77 1f       	adc	r23, r23
     8ac:	44 0f       	add	r20, r20
     8ae:	55 1f       	adc	r21, r21
     8b0:	66 1f       	adc	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	44 0f       	add	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	66 1f       	adc	r22, r22
     8ba:	77 1f       	adc	r23, r23
     8bc:	44 0f       	add	r20, r20
     8be:	55 1f       	adc	r21, r21
     8c0:	66 1f       	adc	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	40 2b       	or	r20, r16
     8c6:	51 2b       	or	r21, r17
     8c8:	62 2b       	or	r22, r18
     8ca:	73 2b       	or	r23, r19
     8cc:	85 81       	ldd	r24, Z+5	; 0x05
     8ce:	82 95       	swap	r24
     8d0:	8f 70       	andi	r24, 0x0F	; 15
     8d2:	48 2b       	or	r20, r24
     8d4:	14 96       	adiw	r26, 0x04	; 4
     8d6:	4d 93       	st	X+, r20
     8d8:	5d 93       	st	X+, r21
     8da:	6d 93       	st	X+, r22
     8dc:	7c 93       	st	X, r23
     8de:	17 97       	sbiw	r26, 0x07	; 7

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
	data_msb = (uint32_t)reg_data[7];
	uncomp_data->humidity = data_msb | data_lsb;
     8e0:	46 81       	ldd	r20, Z+6	; 0x06
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	76 2f       	mov	r23, r22
     8ea:	65 2f       	mov	r22, r21
     8ec:	54 2f       	mov	r21, r20
     8ee:	44 27       	eor	r20, r20
     8f0:	87 81       	ldd	r24, Z+7	; 0x07
     8f2:	48 2b       	or	r20, r24
     8f4:	18 96       	adiw	r26, 0x08	; 8
     8f6:	4d 93       	st	X+, r20
     8f8:	5d 93       	st	X+, r21
     8fa:	6d 93       	st	X+, r22
     8fc:	7c 93       	st	X, r23
     8fe:	1b 97       	sbiw	r26, 0x0b	; 11
}
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
     906:	2f 92       	push	r2
     908:	3f 92       	push	r3
     90a:	4f 92       	push	r4
     90c:	5f 92       	push	r5
     90e:	6f 92       	push	r6
     910:	7f 92       	push	r7
     912:	8f 92       	push	r8
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	bf 92       	push	r11
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	00 d0       	rcall	.+0      	; 0x92c <bme280_compensate_data+0x26>
     92c:	1f 92       	push	r1
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	1b 01       	movw	r2, r22
     936:	8a 01       	movw	r16, r20
     938:	3b 83       	std	Y+3, r19	; 0x03
     93a:	2a 83       	std	Y+2, r18	; 0x02
	int8_t rslt = BME280_OK;

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
     93c:	61 15       	cp	r22, r1
     93e:	71 05       	cpc	r23, r1
     940:	09 f4       	brne	.+2      	; 0x944 <bme280_compensate_data+0x3e>
     942:	00 c4       	rjmp	.+2048   	; 0x1144 <bme280_compensate_data+0x83e>
     944:	41 15       	cp	r20, r1
     946:	51 05       	cpc	r21, r1
     948:	09 f4       	brne	.+2      	; 0x94c <bme280_compensate_data+0x46>
     94a:	fe c3       	rjmp	.+2044   	; 0x1148 <bme280_compensate_data+0x842>
     94c:	21 15       	cp	r18, r1
     94e:	31 05       	cpc	r19, r1
     950:	09 f4       	brne	.+2      	; 0x954 <bme280_compensate_data+0x4e>
     952:	fc c3       	rjmp	.+2040   	; 0x114c <bme280_compensate_data+0x846>
		/* Initialize to zero */
		comp_data->temperature = 0;
     954:	fa 01       	movw	r30, r20
     956:	14 82       	std	Z+4, r1	; 0x04
     958:	15 82       	std	Z+5, r1	; 0x05
     95a:	16 82       	std	Z+6, r1	; 0x06
     95c:	17 82       	std	Z+7, r1	; 0x07
		comp_data->pressure = 0;
     95e:	10 82       	st	Z, r1
     960:	11 82       	std	Z+1, r1	; 0x01
     962:	12 82       	std	Z+2, r1	; 0x02
     964:	13 82       	std	Z+3, r1	; 0x03
		comp_data->humidity = 0;
     966:	10 86       	std	Z+8, r1	; 0x08
     968:	11 86       	std	Z+9, r1	; 0x09
     96a:	12 86       	std	Z+10, r1	; 0x0a
     96c:	13 86       	std	Z+11, r1	; 0x0b
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
     96e:	87 70       	andi	r24, 0x07	; 7
     970:	09 f4       	brne	.+2      	; 0x974 <bme280_compensate_data+0x6e>
     972:	c2 c0       	rjmp	.+388    	; 0xaf8 <bme280_compensate_data+0x1f2>
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
	int32_t temperature_max = 8500;

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
     974:	fb 01       	movw	r30, r22
     976:	c4 80       	ldd	r12, Z+4	; 0x04
     978:	d5 80       	ldd	r13, Z+5	; 0x05
     97a:	e6 80       	ldd	r14, Z+6	; 0x06
     97c:	f7 80       	ldd	r15, Z+7	; 0x07
     97e:	f9 01       	movw	r30, r18
     980:	40 80       	ld	r4, Z
     982:	51 80       	ldd	r5, Z+1	; 0x01
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
     984:	b7 01       	movw	r22, r14
     986:	a6 01       	movw	r20, r12
     988:	68 94       	set
     98a:	12 f8       	bld	r1, 2
     98c:	76 95       	lsr	r23
     98e:	67 95       	ror	r22
     990:	57 95       	ror	r21
     992:	47 95       	ror	r20
     994:	16 94       	lsr	r1
     996:	d1 f7       	brne	.-12     	; 0x98c <bme280_compensate_data+0x86>
     998:	61 2c       	mov	r6, r1
     99a:	71 2c       	mov	r7, r1
     99c:	d3 01       	movw	r26, r6
     99e:	c2 01       	movw	r24, r4
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	aa 1f       	adc	r26, r26
     9a6:	bb 1f       	adc	r27, r27
     9a8:	9a 01       	movw	r18, r20
     9aa:	ab 01       	movw	r20, r22
     9ac:	28 1b       	sub	r18, r24
     9ae:	39 0b       	sbc	r19, r25
     9b0:	4a 0b       	sbc	r20, r26
     9b2:	5b 0b       	sbc	r21, r27
     9b4:	a2 81       	ldd	r26, Z+2	; 0x02
     9b6:	b3 81       	ldd	r27, Z+3	; 0x03
     9b8:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     9bc:	4b 01       	movw	r8, r22
     9be:	5c 01       	movw	r10, r24
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
     9c0:	d7 01       	movw	r26, r14
     9c2:	c6 01       	movw	r24, r12
     9c4:	68 94       	set
     9c6:	13 f8       	bld	r1, 3
     9c8:	b6 95       	lsr	r27
     9ca:	a7 95       	ror	r26
     9cc:	97 95       	ror	r25
     9ce:	87 95       	ror	r24
     9d0:	16 94       	lsr	r1
     9d2:	d1 f7       	brne	.-12     	; 0x9c8 <bme280_compensate_data+0xc2>
     9d4:	bc 01       	movw	r22, r24
     9d6:	cd 01       	movw	r24, r26
     9d8:	64 19       	sub	r22, r4
     9da:	75 09       	sbc	r23, r5
     9dc:	86 09       	sbc	r24, r6
     9de:	97 09       	sbc	r25, r7
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
     9e8:	6b 01       	movw	r12, r22
     9ea:	7c 01       	movw	r14, r24
     9ec:	99 23       	and	r25, r25
     9ee:	34 f4       	brge	.+12     	; 0x9fc <bme280_compensate_data+0xf6>
     9f0:	ff ef       	ldi	r31, 0xFF	; 255
     9f2:	cf 0e       	add	r12, r31
     9f4:	ff e0       	ldi	r31, 0x0F	; 15
     9f6:	df 1e       	adc	r13, r31
     9f8:	e1 1c       	adc	r14, r1
     9fa:	f1 1c       	adc	r15, r1
     9fc:	a7 01       	movw	r20, r14
     9fe:	96 01       	movw	r18, r12
     a00:	01 2e       	mov	r0, r17
     a02:	1c e0       	ldi	r17, 0x0C	; 12
     a04:	55 95       	asr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	1a 95       	dec	r17
     a0e:	d1 f7       	brne	.-12     	; 0xa04 <bme280_compensate_data+0xfe>
     a10:	10 2d       	mov	r17, r0
     a12:	ea 81       	ldd	r30, Y+2	; 0x02
     a14:	fb 81       	ldd	r31, Y+3	; 0x03
     a16:	a4 81       	ldd	r26, Z+4	; 0x04
     a18:	b5 81       	ldd	r27, Z+5	; 0x05
     a1a:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
	calib_data->t_fine = var1 + var2;
     a1e:	75 01       	movw	r14, r10
     a20:	64 01       	movw	r12, r8
     a22:	bb 20       	and	r11, r11
     a24:	34 f4       	brge	.+12     	; 0xa32 <bme280_compensate_data+0x12c>
     a26:	ff ef       	ldi	r31, 0xFF	; 255
     a28:	cf 0e       	add	r12, r31
     a2a:	f7 e0       	ldi	r31, 0x07	; 7
     a2c:	df 1e       	adc	r13, r31
     a2e:	e1 1c       	adc	r14, r1
     a30:	f1 1c       	adc	r15, r1
     a32:	0b 2e       	mov	r0, r27
     a34:	bb e0       	ldi	r27, 0x0B	; 11
     a36:	f5 94       	asr	r15
     a38:	e7 94       	ror	r14
     a3a:	d7 94       	ror	r13
     a3c:	c7 94       	ror	r12
     a3e:	ba 95       	dec	r27
     a40:	d1 f7       	brne	.-12     	; 0xa36 <bme280_compensate_data+0x130>
     a42:	b0 2d       	mov	r27, r0
     a44:	4b 01       	movw	r8, r22
     a46:	5c 01       	movw	r10, r24
     a48:	99 23       	and	r25, r25
     a4a:	34 f4       	brge	.+12     	; 0xa58 <bme280_compensate_data+0x152>
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	82 0e       	add	r8, r18
     a50:	2f e3       	ldi	r18, 0x3F	; 63
     a52:	92 1e       	adc	r9, r18
     a54:	a1 1c       	adc	r10, r1
     a56:	b1 1c       	adc	r11, r1
     a58:	b5 01       	movw	r22, r10
     a5a:	a4 01       	movw	r20, r8
     a5c:	03 2e       	mov	r0, r19
     a5e:	3e e0       	ldi	r19, 0x0E	; 14
     a60:	75 95       	asr	r23
     a62:	67 95       	ror	r22
     a64:	57 95       	ror	r21
     a66:	47 95       	ror	r20
     a68:	3a 95       	dec	r19
     a6a:	d1 f7       	brne	.-12     	; 0xa60 <bme280_compensate_data+0x15a>
     a6c:	30 2d       	mov	r19, r0
     a6e:	d7 01       	movw	r26, r14
     a70:	c6 01       	movw	r24, r12
     a72:	84 0f       	add	r24, r20
     a74:	95 1f       	adc	r25, r21
     a76:	a6 1f       	adc	r26, r22
     a78:	b7 1f       	adc	r27, r23
     a7a:	ea 81       	ldd	r30, Y+2	; 0x02
     a7c:	fb 81       	ldd	r31, Y+3	; 0x03
     a7e:	81 a3       	std	Z+33, r24	; 0x21
     a80:	92 a3       	std	Z+34, r25	; 0x22
     a82:	a3 a3       	std	Z+35, r26	; 0x23
     a84:	b4 a3       	std	Z+36, r27	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
     a86:	ac 01       	movw	r20, r24
     a88:	bd 01       	movw	r22, r26
     a8a:	44 0f       	add	r20, r20
     a8c:	55 1f       	adc	r21, r21
     a8e:	66 1f       	adc	r22, r22
     a90:	77 1f       	adc	r23, r23
     a92:	44 0f       	add	r20, r20
     a94:	55 1f       	adc	r21, r21
     a96:	66 1f       	adc	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	84 0f       	add	r24, r20
     a9c:	95 1f       	adc	r25, r21
     a9e:	a6 1f       	adc	r26, r22
     aa0:	b7 1f       	adc	r27, r23
     aa2:	80 58       	subi	r24, 0x80	; 128
     aa4:	9f 4f       	sbci	r25, 0xFF	; 255
     aa6:	af 4f       	sbci	r26, 0xFF	; 255
     aa8:	bf 4f       	sbci	r27, 0xFF	; 255
     aaa:	ac 01       	movw	r20, r24
     aac:	bd 01       	movw	r22, r26
     aae:	22 f4       	brpl	.+8      	; 0xab8 <bme280_compensate_data+0x1b2>
     ab0:	41 50       	subi	r20, 0x01	; 1
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	6f 4f       	sbci	r22, 0xFF	; 255
     ab6:	7f 4f       	sbci	r23, 0xFF	; 255
     ab8:	bb 27       	eor	r27, r27
     aba:	77 fd       	sbrc	r23, 7
     abc:	ba 95       	dec	r27
     abe:	a7 2f       	mov	r26, r23
     ac0:	96 2f       	mov	r25, r22
     ac2:	85 2f       	mov	r24, r21
     ac4:	85 33       	cpi	r24, 0x35	; 53
     ac6:	f1 e2       	ldi	r31, 0x21	; 33
     ac8:	9f 07       	cpc	r25, r31
     aca:	a1 05       	cpc	r26, r1
     acc:	b1 05       	cpc	r27, r1
     ace:	24 f0       	brlt	.+8      	; 0xad8 <bme280_compensate_data+0x1d2>
     ad0:	84 e3       	ldi	r24, 0x34	; 52
     ad2:	91 e2       	ldi	r25, 0x21	; 33
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
		comp_data->pressure = 0;
		comp_data->humidity = 0;
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
     ad8:	80 36       	cpi	r24, 0x60	; 96
     ada:	20 ef       	ldi	r18, 0xF0	; 240
     adc:	92 07       	cpc	r25, r18
     ade:	2f ef       	ldi	r18, 0xFF	; 255
     ae0:	a2 07       	cpc	r26, r18
     ae2:	b2 07       	cpc	r27, r18
     ae4:	24 f4       	brge	.+8      	; 0xaee <bme280_compensate_data+0x1e8>
     ae6:	80 e6       	ldi	r24, 0x60	; 96
     ae8:	90 ef       	ldi	r25, 0xF0	; 240
     aea:	af ef       	ldi	r26, 0xFF	; 255
     aec:	bf ef       	ldi	r27, 0xFF	; 255
     aee:	f8 01       	movw	r30, r16
     af0:	84 83       	std	Z+4, r24	; 0x04
     af2:	95 83       	std	Z+5, r25	; 0x05
     af4:	a6 83       	std	Z+6, r26	; 0x06
     af6:	b7 83       	std	Z+7, r27	; 0x07
		}
		if (sensor_comp & BME280_PRESS) {
     af8:	f9 81       	ldd	r31, Y+1	; 0x01
     afa:	f0 ff       	sbrs	r31, 0
     afc:	d1 c1       	rjmp	.+930    	; 0xea0 <bme280_compensate_data+0x59a>
	uint32_t var5;
	uint32_t pressure;
	uint32_t pressure_min = 30000;
	uint32_t pressure_max = 110000;

	var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
     afe:	ea 81       	ldd	r30, Y+2	; 0x02
     b00:	fb 81       	ldd	r31, Y+3	; 0x03
     b02:	c1 a0       	ldd	r12, Z+33	; 0x21
     b04:	d2 a0       	ldd	r13, Z+34	; 0x22
     b06:	e3 a0       	ldd	r14, Z+35	; 0x23
     b08:	f4 a0       	ldd	r15, Z+36	; 0x24
     b0a:	ff 20       	and	r15, r15
     b0c:	2c f4       	brge	.+10     	; 0xb18 <bme280_compensate_data+0x212>
     b0e:	ff ef       	ldi	r31, 0xFF	; 255
     b10:	cf 1a       	sub	r12, r31
     b12:	df 0a       	sbc	r13, r31
     b14:	ef 0a       	sbc	r14, r31
     b16:	ff 0a       	sbc	r15, r31
     b18:	f5 94       	asr	r15
     b1a:	e7 94       	ror	r14
     b1c:	d7 94       	ror	r13
     b1e:	c7 94       	ror	r12
     b20:	2a ef       	ldi	r18, 0xFA	; 250
     b22:	d2 1a       	sub	r13, r18
     b24:	e1 08       	sbc	r14, r1
     b26:	f1 08       	sbc	r15, r1
	var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
     b28:	d7 01       	movw	r26, r14
     b2a:	c6 01       	movw	r24, r12
     b2c:	ff 20       	and	r15, r15
     b2e:	1c f4       	brge	.+6      	; 0xb36 <bme280_compensate_data+0x230>
     b30:	03 96       	adiw	r24, 0x03	; 3
     b32:	a1 1d       	adc	r26, r1
     b34:	b1 1d       	adc	r27, r1
     b36:	bc 01       	movw	r22, r24
     b38:	cd 01       	movw	r24, r26
     b3a:	95 95       	asr	r25
     b3c:	87 95       	ror	r24
     b3e:	77 95       	ror	r23
     b40:	67 95       	ror	r22
     b42:	95 95       	asr	r25
     b44:	87 95       	ror	r24
     b46:	77 95       	ror	r23
     b48:	67 95       	ror	r22
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
     b4e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
     b52:	2b 01       	movw	r4, r22
     b54:	3c 01       	movw	r6, r24
	var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
	var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
	var3 = (calib_data->dig_P3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
	var4 = (((int32_t)calib_data->dig_P2) * var1) / 2;
	var1 = (var3 + var4) / 262144;
     b56:	ea 81       	ldd	r30, Y+2	; 0x02
     b58:	fb 81       	ldd	r31, Y+3	; 0x03
     b5a:	22 85       	ldd	r18, Z+10	; 0x0a
     b5c:	33 85       	ldd	r19, Z+11	; 0x0b
     b5e:	03 2e       	mov	r0, r19
     b60:	00 0c       	add	r0, r0
     b62:	44 0b       	sbc	r20, r20
     b64:	55 0b       	sbc	r21, r21
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	77 20       	and	r7, r7
     b6c:	24 f4       	brge	.+8      	; 0xb76 <bme280_compensate_data+0x270>
     b6e:	81 50       	subi	r24, 0x01	; 1
     b70:	90 4e       	sbci	r25, 0xE0	; 224
     b72:	af 4f       	sbci	r26, 0xFF	; 255
     b74:	bf 4f       	sbci	r27, 0xFF	; 255
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	05 2e       	mov	r0, r21
     b7c:	5d e0       	ldi	r21, 0x0D	; 13
     b7e:	95 95       	asr	r25
     b80:	87 95       	ror	r24
     b82:	77 95       	ror	r23
     b84:	67 95       	ror	r22
     b86:	5a 95       	dec	r21
     b88:	d1 f7       	brne	.-12     	; 0xb7e <bme280_compensate_data+0x278>
     b8a:	50 2d       	mov	r21, r0
     b8c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
     b90:	4b 01       	movw	r8, r22
     b92:	5c 01       	movw	r10, r24
     b94:	99 23       	and	r25, r25
     b96:	2c f4       	brge	.+10     	; 0xba2 <bme280_compensate_data+0x29c>
     b98:	f7 e0       	ldi	r31, 0x07	; 7
     b9a:	8f 0e       	add	r8, r31
     b9c:	91 1c       	adc	r9, r1
     b9e:	a1 1c       	adc	r10, r1
     ba0:	b1 1c       	adc	r11, r1
     ba2:	68 94       	set
     ba4:	12 f8       	bld	r1, 2
     ba6:	b5 94       	asr	r11
     ba8:	a7 94       	ror	r10
     baa:	97 94       	ror	r9
     bac:	87 94       	ror	r8
     bae:	16 94       	lsr	r1
     bb0:	d1 f7       	brne	.-12     	; 0xba6 <bme280_compensate_data+0x2a0>
     bb2:	ea 81       	ldd	r30, Y+2	; 0x02
     bb4:	fb 81       	ldd	r31, Y+3	; 0x03
     bb6:	a0 85       	ldd	r26, Z+8	; 0x08
     bb8:	b1 85       	ldd	r27, Z+9	; 0x09
     bba:	a7 01       	movw	r20, r14
     bbc:	96 01       	movw	r18, r12
     bbe:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	99 23       	and	r25, r25
     bc8:	24 f4       	brge	.+8      	; 0xbd2 <bme280_compensate_data+0x2cc>
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	4f 4f       	sbci	r20, 0xFF	; 255
     bd0:	5f 4f       	sbci	r21, 0xFF	; 255
     bd2:	da 01       	movw	r26, r20
     bd4:	c9 01       	movw	r24, r18
     bd6:	b5 95       	asr	r27
     bd8:	a7 95       	ror	r26
     bda:	97 95       	ror	r25
     bdc:	87 95       	ror	r24
     bde:	88 0e       	add	r8, r24
     be0:	99 1e       	adc	r9, r25
     be2:	aa 1e       	adc	r10, r26
     be4:	bb 1e       	adc	r11, r27
	var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
     be6:	d5 01       	movw	r26, r10
     be8:	c4 01       	movw	r24, r8
     bea:	bb 20       	and	r11, r11
     bec:	1c f4       	brge	.+6      	; 0xbf4 <bme280_compensate_data+0x2ee>
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	ac 4f       	sbci	r26, 0xFC	; 252
     bf2:	bf 4f       	sbci	r27, 0xFF	; 255
     bf4:	07 2e       	mov	r0, r23
     bf6:	72 e1       	ldi	r23, 0x12	; 18
     bf8:	b5 95       	asr	r27
     bfa:	a7 95       	ror	r26
     bfc:	97 95       	ror	r25
     bfe:	87 95       	ror	r24
     c00:	7a 95       	dec	r23
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <bme280_compensate_data+0x2f2>
     c04:	70 2d       	mov	r23, r0
     c06:	9c 01       	movw	r18, r24
     c08:	ad 01       	movw	r20, r26
     c0a:	30 58       	subi	r19, 0x80	; 128
     c0c:	4f 4f       	sbci	r20, 0xFF	; 255
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	ea 81       	ldd	r30, Y+2	; 0x02
     c12:	fb 81       	ldd	r31, Y+3	; 0x03
     c14:	a6 81       	ldd	r26, Z+6	; 0x06
     c16:	b7 81       	ldd	r27, Z+7	; 0x07
     c18:	0e 94 42 0c 	call	0x1884	; 0x1884 <__muluhisi3>
     c1c:	4b 01       	movw	r8, r22
     c1e:	5c 01       	movw	r10, r24
     c20:	99 23       	and	r25, r25
     c22:	34 f4       	brge	.+12     	; 0xc30 <bme280_compensate_data+0x32a>
     c24:	ff ef       	ldi	r31, 0xFF	; 255
     c26:	8f 0e       	add	r8, r31
     c28:	ff e7       	ldi	r31, 0x7F	; 127
     c2a:	9f 1e       	adc	r9, r31
     c2c:	a1 1c       	adc	r10, r1
     c2e:	b1 1c       	adc	r11, r1
     c30:	07 2e       	mov	r0, r23
     c32:	7f e0       	ldi	r23, 0x0F	; 15
     c34:	b5 94       	asr	r11
     c36:	a7 94       	ror	r10
     c38:	97 94       	ror	r9
     c3a:	87 94       	ror	r8
     c3c:	7a 95       	dec	r23
     c3e:	d1 f7       	brne	.-12     	; 0xc34 <bme280_compensate_data+0x32e>
     c40:	70 2d       	mov	r23, r0
	 /* avoid exception caused by division by zero */
	if (var1) {
     c42:	81 14       	cp	r8, r1
     c44:	91 04       	cpc	r9, r1
     c46:	a1 04       	cpc	r10, r1
     c48:	b1 04       	cpc	r11, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <bme280_compensate_data+0x348>
     c4c:	1b c1       	rjmp	.+566    	; 0xe84 <bme280_compensate_data+0x57e>
	uint32_t pressure;
	uint32_t pressure_min = 30000;
	uint32_t pressure_max = 110000;

	var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
	var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_P6);
     c4e:	d3 01       	movw	r26, r6
     c50:	c2 01       	movw	r24, r4
     c52:	77 20       	and	r7, r7
     c54:	24 f4       	brge	.+8      	; 0xc5e <bme280_compensate_data+0x358>
     c56:	81 50       	subi	r24, 0x01	; 1
     c58:	98 4f       	sbci	r25, 0xF8	; 248
     c5a:	af 4f       	sbci	r26, 0xFF	; 255
     c5c:	bf 4f       	sbci	r27, 0xFF	; 255
     c5e:	9c 01       	movw	r18, r24
     c60:	ad 01       	movw	r20, r26
     c62:	01 2e       	mov	r0, r17
     c64:	1b e0       	ldi	r17, 0x0B	; 11
     c66:	55 95       	asr	r21
     c68:	47 95       	ror	r20
     c6a:	37 95       	ror	r19
     c6c:	27 95       	ror	r18
     c6e:	1a 95       	dec	r17
     c70:	d1 f7       	brne	.-12     	; 0xc66 <bme280_compensate_data+0x360>
     c72:	10 2d       	mov	r17, r0
     c74:	ea 81       	ldd	r30, Y+2	; 0x02
     c76:	fb 81       	ldd	r31, Y+3	; 0x03
     c78:	a0 89       	ldd	r26, Z+16	; 0x10
     c7a:	b1 89       	ldd	r27, Z+17	; 0x11
     c7c:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     c80:	2b 01       	movw	r4, r22
     c82:	3c 01       	movw	r6, r24
	var2 = var2 + ((var1 * ((int32_t)calib_data->dig_P5)) * 2);
	var2 = (var2 / 4) + (((int32_t)calib_data->dig_P4) * 65536);
     c84:	a6 85       	ldd	r26, Z+14	; 0x0e
     c86:	b7 85       	ldd	r27, Z+15	; 0x0f
     c88:	a7 01       	movw	r20, r14
     c8a:	96 01       	movw	r18, r12
     c8c:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	aa 1f       	adc	r26, r26
     c9a:	bb 1f       	adc	r27, r27
     c9c:	48 0e       	add	r4, r24
     c9e:	59 1e       	adc	r5, r25
     ca0:	6a 1e       	adc	r6, r26
     ca2:	7b 1e       	adc	r7, r27
     ca4:	d3 01       	movw	r26, r6
     ca6:	c2 01       	movw	r24, r4
     ca8:	77 20       	and	r7, r7
     caa:	1c f4       	brge	.+6      	; 0xcb2 <bme280_compensate_data+0x3ac>
     cac:	03 96       	adiw	r24, 0x03	; 3
     cae:	a1 1d       	adc	r26, r1
     cb0:	b1 1d       	adc	r27, r1
     cb2:	b5 95       	asr	r27
     cb4:	a7 95       	ror	r26
     cb6:	97 95       	ror	r25
     cb8:	87 95       	ror	r24
     cba:	b5 95       	asr	r27
     cbc:	a7 95       	ror	r26
     cbe:	97 95       	ror	r25
     cc0:	87 95       	ror	r24
	var1 = (var3 + var4) / 262144;
	var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_P1)) / 32768;
	 /* avoid exception caused by division by zero */
	if (var1) {
		var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
		pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
     cc2:	f1 01       	movw	r30, r2
     cc4:	40 81       	ld	r20, Z
     cc6:	51 81       	ldd	r21, Z+1	; 0x01
     cc8:	62 81       	ldd	r22, Z+2	; 0x02
     cca:	73 81       	ldd	r23, Z+3	; 0x03
     ccc:	c1 2c       	mov	r12, r1
     cce:	d1 2c       	mov	r13, r1
     cd0:	76 01       	movw	r14, r12
     cd2:	68 94       	set
     cd4:	e4 f8       	bld	r14, 4
     cd6:	c4 1a       	sub	r12, r20
     cd8:	d5 0a       	sbc	r13, r21
     cda:	e6 0a       	sbc	r14, r22
     cdc:	f7 0a       	sbc	r15, r23
     cde:	ea 81       	ldd	r30, Y+2	; 0x02
     ce0:	fb 81       	ldd	r31, Y+3	; 0x03
     ce2:	44 85       	ldd	r20, Z+12	; 0x0c
     ce4:	55 85       	ldd	r21, Z+13	; 0x0d
     ce6:	05 2e       	mov	r0, r21
     ce8:	00 0c       	add	r0, r0
     cea:	66 0b       	sbc	r22, r22
     cec:	77 0b       	sbc	r23, r23
     cee:	ba 01       	movw	r22, r20
     cf0:	55 27       	eor	r21, r21
     cf2:	44 27       	eor	r20, r20
     cf4:	48 0f       	add	r20, r24
     cf6:	59 1f       	adc	r21, r25
     cf8:	6a 1f       	adc	r22, r26
     cfa:	7b 1f       	adc	r23, r27
     cfc:	2a 01       	movw	r4, r20
     cfe:	3b 01       	movw	r6, r22
     d00:	77 23       	and	r23, r23
     d02:	34 f4       	brge	.+12     	; 0xd10 <bme280_compensate_data+0x40a>
     d04:	ff ef       	ldi	r31, 0xFF	; 255
     d06:	4f 0e       	add	r4, r31
     d08:	ff e0       	ldi	r31, 0x0F	; 15
     d0a:	5f 1e       	adc	r5, r31
     d0c:	61 1c       	adc	r6, r1
     d0e:	71 1c       	adc	r7, r1
     d10:	03 2e       	mov	r0, r19
     d12:	3c e0       	ldi	r19, 0x0C	; 12
     d14:	75 94       	asr	r7
     d16:	67 94       	ror	r6
     d18:	57 94       	ror	r5
     d1a:	47 94       	ror	r4
     d1c:	3a 95       	dec	r19
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <bme280_compensate_data+0x40e>
     d20:	30 2d       	mov	r19, r0
     d22:	a7 01       	movw	r20, r14
     d24:	96 01       	movw	r18, r12
     d26:	24 19       	sub	r18, r4
     d28:	35 09       	sbc	r19, r5
     d2a:	46 09       	sbc	r20, r6
     d2c:	57 09       	sbc	r21, r7
     d2e:	a5 e3       	ldi	r26, 0x35	; 53
     d30:	bc e0       	ldi	r27, 0x0C	; 12
     d32:	0e 94 42 0c 	call	0x1884	; 0x1884 <__muluhisi3>
		if (pressure < 0x80000000)
     d36:	99 23       	and	r25, r25
     d38:	5c f0       	brlt	.+22     	; 0xd50 <bme280_compensate_data+0x44a>
			pressure = (pressure << 1) / ((uint32_t)var1);
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	a5 01       	movw	r20, r10
     d44:	94 01       	movw	r18, r8
     d46:	0e 94 01 0c 	call	0x1802	; 0x1802 <__udivmodsi4>
     d4a:	69 01       	movw	r12, r18
     d4c:	7a 01       	movw	r14, r20
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <bme280_compensate_data+0x45e>
		else
			pressure = (pressure / (uint32_t)var1) * 2;
     d50:	a5 01       	movw	r20, r10
     d52:	94 01       	movw	r18, r8
     d54:	0e 94 01 0c 	call	0x1802	; 0x1802 <__udivmodsi4>
     d58:	69 01       	movw	r12, r18
     d5a:	7a 01       	movw	r14, r20
     d5c:	cc 0c       	add	r12, r12
     d5e:	dd 1c       	adc	r13, r13
     d60:	ee 1c       	adc	r14, r14
     d62:	ff 1c       	adc	r15, r15

		var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
     d64:	c7 01       	movw	r24, r14
     d66:	b6 01       	movw	r22, r12
     d68:	68 94       	set
     d6a:	12 f8       	bld	r1, 2
     d6c:	96 95       	lsr	r25
     d6e:	87 95       	ror	r24
     d70:	77 95       	ror	r23
     d72:	67 95       	ror	r22
     d74:	16 94       	lsr	r1
     d76:	d1 f7       	brne	.-12     	; 0xd6c <bme280_compensate_data+0x466>
		var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
		pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));
     d78:	9b 01       	movw	r18, r22
     d7a:	ac 01       	movw	r20, r24
     d7c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	01 2e       	mov	r0, r17
     d86:	1d e0       	ldi	r17, 0x0D	; 13
     d88:	56 95       	lsr	r21
     d8a:	47 95       	ror	r20
     d8c:	37 95       	ror	r19
     d8e:	27 95       	ror	r18
     d90:	1a 95       	dec	r17
     d92:	d1 f7       	brne	.-12     	; 0xd88 <bme280_compensate_data+0x482>
     d94:	10 2d       	mov	r17, r0
     d96:	ea 81       	ldd	r30, Y+2	; 0x02
     d98:	fb 81       	ldd	r31, Y+3	; 0x03
     d9a:	a6 89       	ldd	r26, Z+22	; 0x16
     d9c:	b7 89       	ldd	r27, Z+23	; 0x17
     d9e:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     da2:	4b 01       	movw	r8, r22
     da4:	5c 01       	movw	r10, r24
     da6:	99 23       	and	r25, r25
     da8:	34 f4       	brge	.+12     	; 0xdb6 <bme280_compensate_data+0x4b0>
     daa:	ff ef       	ldi	r31, 0xFF	; 255
     dac:	8f 0e       	add	r8, r31
     dae:	ff e0       	ldi	r31, 0x0F	; 15
     db0:	9f 1e       	adc	r9, r31
     db2:	a1 1c       	adc	r10, r1
     db4:	b1 1c       	adc	r11, r1
     db6:	07 2e       	mov	r0, r23
     db8:	7c e0       	ldi	r23, 0x0C	; 12
     dba:	b5 94       	asr	r11
     dbc:	a7 94       	ror	r10
     dbe:	97 94       	ror	r9
     dc0:	87 94       	ror	r8
     dc2:	7a 95       	dec	r23
     dc4:	d1 f7       	brne	.-12     	; 0xdba <bme280_compensate_data+0x4b4>
     dc6:	70 2d       	mov	r23, r0
     dc8:	ea 81       	ldd	r30, Y+2	; 0x02
     dca:	fb 81       	ldd	r31, Y+3	; 0x03
     dcc:	a4 89       	ldd	r26, Z+20	; 0x14
     dce:	b5 89       	ldd	r27, Z+21	; 0x15
     dd0:	a7 01       	movw	r20, r14
     dd2:	96 01       	movw	r18, r12
     dd4:	56 95       	lsr	r21
     dd6:	47 95       	ror	r20
     dd8:	37 95       	ror	r19
     dda:	27 95       	ror	r18
     ddc:	56 95       	lsr	r21
     dde:	47 95       	ror	r20
     de0:	37 95       	ror	r19
     de2:	27 95       	ror	r18
     de4:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     de8:	2b 01       	movw	r4, r22
     dea:	3c 01       	movw	r6, r24
     dec:	99 23       	and	r25, r25
     dee:	34 f4       	brge	.+12     	; 0xdfc <bme280_compensate_data+0x4f6>
     df0:	ff ef       	ldi	r31, 0xFF	; 255
     df2:	4f 0e       	add	r4, r31
     df4:	ff e1       	ldi	r31, 0x1F	; 31
     df6:	5f 1e       	adc	r5, r31
     df8:	61 1c       	adc	r6, r1
     dfa:	71 1c       	adc	r7, r1
     dfc:	d3 01       	movw	r26, r6
     dfe:	c2 01       	movw	r24, r4
     e00:	07 2e       	mov	r0, r23
     e02:	7d e0       	ldi	r23, 0x0D	; 13
     e04:	b5 95       	asr	r27
     e06:	a7 95       	ror	r26
     e08:	97 95       	ror	r25
     e0a:	87 95       	ror	r24
     e0c:	7a 95       	dec	r23
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <bme280_compensate_data+0x4fe>
     e10:	70 2d       	mov	r23, r0
     e12:	88 0e       	add	r8, r24
     e14:	99 1e       	adc	r9, r25
     e16:	aa 1e       	adc	r10, r26
     e18:	bb 1e       	adc	r11, r27
     e1a:	ea 81       	ldd	r30, Y+2	; 0x02
     e1c:	fb 81       	ldd	r31, Y+3	; 0x03
     e1e:	82 89       	ldd	r24, Z+18	; 0x12
     e20:	93 89       	ldd	r25, Z+19	; 0x13
     e22:	09 2e       	mov	r0, r25
     e24:	00 0c       	add	r0, r0
     e26:	aa 0b       	sbc	r26, r26
     e28:	bb 0b       	sbc	r27, r27
     e2a:	88 0e       	add	r8, r24
     e2c:	99 1e       	adc	r9, r25
     e2e:	aa 1e       	adc	r10, r26
     e30:	bb 1e       	adc	r11, r27
     e32:	d5 01       	movw	r26, r10
     e34:	c4 01       	movw	r24, r8
     e36:	bb 20       	and	r11, r11
     e38:	1c f4       	brge	.+6      	; 0xe40 <bme280_compensate_data+0x53a>
     e3a:	0f 96       	adiw	r24, 0x0f	; 15
     e3c:	a1 1d       	adc	r26, r1
     e3e:	b1 1d       	adc	r27, r1
     e40:	68 94       	set
     e42:	13 f8       	bld	r1, 3
     e44:	b5 95       	asr	r27
     e46:	a7 95       	ror	r26
     e48:	97 95       	ror	r25
     e4a:	87 95       	ror	r24
     e4c:	16 94       	lsr	r1
     e4e:	d1 f7       	brne	.-12     	; 0xe44 <bme280_compensate_data+0x53e>
     e50:	c8 0e       	add	r12, r24
     e52:	d9 1e       	adc	r13, r25
     e54:	ea 1e       	adc	r14, r26
     e56:	fb 1e       	adc	r15, r27

		if (pressure < pressure_min)
     e58:	f0 e3       	ldi	r31, 0x30	; 48
     e5a:	cf 16       	cp	r12, r31
     e5c:	f5 e7       	ldi	r31, 0x75	; 117
     e5e:	df 06       	cpc	r13, r31
     e60:	e1 04       	cpc	r14, r1
     e62:	f1 04       	cpc	r15, r1
     e64:	a0 f0       	brcs	.+40     	; 0xe8e <bme280_compensate_data+0x588>
     e66:	d7 01       	movw	r26, r14
     e68:	c6 01       	movw	r24, r12
     e6a:	21 eb       	ldi	r18, 0xB1	; 177
     e6c:	c2 16       	cp	r12, r18
     e6e:	2d ea       	ldi	r18, 0xAD	; 173
     e70:	d2 06       	cpc	r13, r18
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	e2 06       	cpc	r14, r18
     e76:	f1 04       	cpc	r15, r1
     e78:	70 f0       	brcs	.+28     	; 0xe96 <bme280_compensate_data+0x590>
     e7a:	80 eb       	ldi	r24, 0xB0	; 176
     e7c:	9d ea       	ldi	r25, 0xAD	; 173
     e7e:	a1 e0       	ldi	r26, 0x01	; 1
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <bme280_compensate_data+0x590>
			pressure = pressure_min;
		else if (pressure > pressure_max)
			pressure = pressure_max;
	} else {
		pressure = pressure_min;
     e84:	80 e3       	ldi	r24, 0x30	; 48
     e86:	95 e7       	ldi	r25, 0x75	; 117
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <bme280_compensate_data+0x590>
		var1 = (((int32_t)calib_data->dig_P9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
		var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_P8)) / 8192;
		pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_P7) / 16));

		if (pressure < pressure_min)
			pressure = pressure_min;
     e8e:	80 e3       	ldi	r24, 0x30	; 48
     e90:	95 e7       	ldi	r25, 0x75	; 117
     e92:	a0 e0       	ldi	r26, 0x00	; 0
     e94:	b0 e0       	ldi	r27, 0x00	; 0
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
		}
		if (sensor_comp & BME280_PRESS) {
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
     e96:	f8 01       	movw	r30, r16
     e98:	80 83       	st	Z, r24
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	a2 83       	std	Z+2, r26	; 0x02
     e9e:	b3 83       	std	Z+3, r27	; 0x03
		}
		if (sensor_comp & BME280_HUM) {
     ea0:	f9 81       	ldd	r31, Y+1	; 0x01
     ea2:	f2 ff       	sbrs	r31, 2
     ea4:	55 c1       	rjmp	.+682    	; 0x1150 <bme280_compensate_data+0x84a>
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;

	var1 = calib_data->t_fine - ((int32_t)76800);
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	fb 81       	ldd	r31, Y+3	; 0x03
     eaa:	81 a0       	ldd	r8, Z+33	; 0x21
     eac:	92 a0       	ldd	r9, Z+34	; 0x22
     eae:	a3 a0       	ldd	r10, Z+35	; 0x23
     eb0:	b4 a0       	ldd	r11, Z+36	; 0x24
     eb2:	fc e2       	ldi	r31, 0x2C	; 44
     eb4:	9f 1a       	sub	r9, r31
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	af 0a       	sbc	r10, r31
     eba:	b1 08       	sbc	r11, r1
	var2 = (int32_t)(uncomp_data->humidity * 16384);
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
	var4 = ((int32_t)calib_data->dig_H5) * var1;
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
     ebc:	f1 01       	movw	r30, r2
     ebe:	c0 84       	ldd	r12, Z+8	; 0x08
     ec0:	d1 84       	ldd	r13, Z+9	; 0x09
     ec2:	e2 84       	ldd	r14, Z+10	; 0x0a
     ec4:	f3 84       	ldd	r15, Z+11	; 0x0b
     ec6:	0b 2e       	mov	r0, r27
     ec8:	be e0       	ldi	r27, 0x0E	; 14
     eca:	cc 0c       	add	r12, r12
     ecc:	dd 1c       	adc	r13, r13
     ece:	ee 1c       	adc	r14, r14
     ed0:	ff 1c       	adc	r15, r15
     ed2:	ba 95       	dec	r27
     ed4:	d1 f7       	brne	.-12     	; 0xeca <bme280_compensate_data+0x5c4>
     ed6:	b0 2d       	mov	r27, r0
     ed8:	ea 81       	ldd	r30, Y+2	; 0x02
     eda:	fb 81       	ldd	r31, Y+3	; 0x03
     edc:	44 8d       	ldd	r20, Z+28	; 0x1c
     ede:	55 8d       	ldd	r21, Z+29	; 0x1d
     ee0:	05 2e       	mov	r0, r21
     ee2:	00 0c       	add	r0, r0
     ee4:	66 0b       	sbc	r22, r22
     ee6:	77 0b       	sbc	r23, r23
     ee8:	03 2e       	mov	r0, r19
     eea:	34 e1       	ldi	r19, 0x14	; 20
     eec:	44 0f       	add	r20, r20
     eee:	55 1f       	adc	r21, r21
     ef0:	66 1f       	adc	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	3a 95       	dec	r19
     ef6:	d1 f7       	brne	.-12     	; 0xeec <bme280_compensate_data+0x5e6>
     ef8:	30 2d       	mov	r19, r0
     efa:	c4 1a       	sub	r12, r20
     efc:	d5 0a       	sbc	r13, r21
     efe:	e6 0a       	sbc	r14, r22
     f00:	f7 0a       	sbc	r15, r23
     f02:	a6 8d       	ldd	r26, Z+30	; 0x1e
     f04:	b7 8d       	ldd	r27, Z+31	; 0x1f
     f06:	a5 01       	movw	r20, r10
     f08:	94 01       	movw	r18, r8
     f0a:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     f0e:	a7 01       	movw	r20, r14
     f10:	96 01       	movw	r18, r12
     f12:	26 1b       	sub	r18, r22
     f14:	37 0b       	sbc	r19, r23
     f16:	48 0b       	sbc	r20, r24
     f18:	59 0b       	sbc	r21, r25
     f1a:	da 01       	movw	r26, r20
     f1c:	c9 01       	movw	r24, r18
     f1e:	90 5c       	subi	r25, 0xC0	; 192
     f20:	af 4f       	sbci	r26, 0xFF	; 255
     f22:	bf 4f       	sbci	r27, 0xFF	; 255
     f24:	6c 01       	movw	r12, r24
     f26:	7d 01       	movw	r14, r26
     f28:	bb 23       	and	r27, r27
     f2a:	34 f4       	brge	.+12     	; 0xf38 <bme280_compensate_data+0x632>
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	c3 0e       	add	r12, r19
     f30:	3f e7       	ldi	r19, 0x7F	; 127
     f32:	d3 1e       	adc	r13, r19
     f34:	e1 1c       	adc	r14, r1
     f36:	f1 1c       	adc	r15, r1
     f38:	0b 2e       	mov	r0, r27
     f3a:	bf e0       	ldi	r27, 0x0F	; 15
     f3c:	f5 94       	asr	r15
     f3e:	e7 94       	ror	r14
     f40:	d7 94       	ror	r13
     f42:	c7 94       	ror	r12
     f44:	ba 95       	dec	r27
     f46:	d1 f7       	brne	.-12     	; 0xf3c <bme280_compensate_data+0x636>
     f48:	b0 2d       	mov	r27, r0
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
     f4a:	ea 81       	ldd	r30, Y+2	; 0x02
     f4c:	fb 81       	ldd	r31, Y+3	; 0x03
     f4e:	a3 8d       	ldd	r26, Z+27	; 0x1b
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	a5 01       	movw	r20, r10
     f54:	94 01       	movw	r18, r8
     f56:	0e 94 42 0c 	call	0x1884	; 0x1884 <__muluhisi3>
     f5a:	2b 01       	movw	r4, r22
     f5c:	3c 01       	movw	r6, r24
     f5e:	99 23       	and	r25, r25
     f60:	34 f4       	brge	.+12     	; 0xf6e <bme280_compensate_data+0x668>
     f62:	ff ef       	ldi	r31, 0xFF	; 255
     f64:	4f 0e       	add	r4, r31
     f66:	f7 e0       	ldi	r31, 0x07	; 7
     f68:	5f 1e       	adc	r5, r31
     f6a:	61 1c       	adc	r6, r1
     f6c:	71 1c       	adc	r7, r1
     f6e:	03 2e       	mov	r0, r19
     f70:	3b e0       	ldi	r19, 0x0B	; 11
     f72:	75 94       	asr	r7
     f74:	67 94       	ror	r6
     f76:	57 94       	ror	r5
     f78:	47 94       	ror	r4
     f7a:	3a 95       	dec	r19
     f7c:	d1 f7       	brne	.-12     	; 0xf72 <bme280_compensate_data+0x66c>
     f7e:	30 2d       	mov	r19, r0
     f80:	20 e8       	ldi	r18, 0x80	; 128
     f82:	52 0e       	add	r5, r18
     f84:	61 1c       	adc	r6, r1
     f86:	71 1c       	adc	r7, r1
     f88:	ea 81       	ldd	r30, Y+2	; 0x02
     f8a:	fb 81       	ldd	r31, Y+3	; 0x03
     f8c:	a0 a1       	ldd	r26, Z+32	; 0x20
     f8e:	0a 2e       	mov	r0, r26
     f90:	00 0c       	add	r0, r0
     f92:	bb 0b       	sbc	r27, r27
     f94:	a5 01       	movw	r20, r10
     f96:	94 01       	movw	r18, r8
     f98:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
     f9c:	4b 01       	movw	r8, r22
     f9e:	5c 01       	movw	r10, r24
     fa0:	99 23       	and	r25, r25
     fa2:	34 f4       	brge	.+12     	; 0xfb0 <bme280_compensate_data+0x6aa>
     fa4:	ff ef       	ldi	r31, 0xFF	; 255
     fa6:	8f 0e       	add	r8, r31
     fa8:	f3 e0       	ldi	r31, 0x03	; 3
     faa:	9f 1e       	adc	r9, r31
     fac:	a1 1c       	adc	r10, r1
     fae:	b1 1c       	adc	r11, r1
     fb0:	c5 01       	movw	r24, r10
     fb2:	b4 01       	movw	r22, r8
     fb4:	05 2e       	mov	r0, r21
     fb6:	5a e0       	ldi	r21, 0x0A	; 10
     fb8:	95 95       	asr	r25
     fba:	87 95       	ror	r24
     fbc:	77 95       	ror	r23
     fbe:	67 95       	ror	r22
     fc0:	5a 95       	dec	r21
     fc2:	d1 f7       	brne	.-12     	; 0xfb8 <bme280_compensate_data+0x6b2>
     fc4:	50 2d       	mov	r21, r0
     fc6:	a3 01       	movw	r20, r6
     fc8:	92 01       	movw	r18, r4
     fca:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
     fce:	4b 01       	movw	r8, r22
     fd0:	5c 01       	movw	r10, r24
     fd2:	99 23       	and	r25, r25
     fd4:	34 f4       	brge	.+12     	; 0xfe2 <bme280_compensate_data+0x6dc>
     fd6:	2f ef       	ldi	r18, 0xFF	; 255
     fd8:	82 0e       	add	r8, r18
     fda:	23 e0       	ldi	r18, 0x03	; 3
     fdc:	92 1e       	adc	r9, r18
     fde:	a1 1c       	adc	r10, r1
     fe0:	b1 1c       	adc	r11, r1
     fe2:	d5 01       	movw	r26, r10
     fe4:	c4 01       	movw	r24, r8
     fe6:	07 2e       	mov	r0, r23
     fe8:	7a e0       	ldi	r23, 0x0A	; 10
     fea:	b5 95       	asr	r27
     fec:	a7 95       	ror	r26
     fee:	97 95       	ror	r25
     ff0:	87 95       	ror	r24
     ff2:	7a 95       	dec	r23
     ff4:	d1 f7       	brne	.-12     	; 0xfea <bme280_compensate_data+0x6e4>
     ff6:	70 2d       	mov	r23, r0
     ff8:	9c 01       	movw	r18, r24
     ffa:	ad 01       	movw	r20, r26
     ffc:	40 5e       	subi	r20, 0xE0	; 224
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	ea 81       	ldd	r30, Y+2	; 0x02
    1002:	fb 81       	ldd	r31, Y+3	; 0x03
    1004:	a1 8d       	ldd	r26, Z+25	; 0x19
    1006:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1008:	0e 94 4d 0c 	call	0x189a	; 0x189a <__mulshisi3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	90 5e       	subi	r25, 0xE0	; 224
    1012:	af 4f       	sbci	r26, 0xFF	; 255
    1014:	bf 4f       	sbci	r27, 0xFF	; 255
	var3 = var5 * var2;
    1016:	4c 01       	movw	r8, r24
    1018:	5d 01       	movw	r10, r26
    101a:	bb 23       	and	r27, r27
    101c:	34 f4       	brge	.+12     	; 0x102a <bme280_compensate_data+0x724>
    101e:	ff ef       	ldi	r31, 0xFF	; 255
    1020:	8f 0e       	add	r8, r31
    1022:	ff e3       	ldi	r31, 0x3F	; 63
    1024:	9f 1e       	adc	r9, r31
    1026:	a1 1c       	adc	r10, r1
    1028:	b1 1c       	adc	r11, r1
    102a:	a5 01       	movw	r20, r10
    102c:	94 01       	movw	r18, r8
    102e:	01 2e       	mov	r0, r17
    1030:	1e e0       	ldi	r17, 0x0E	; 14
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	37 95       	ror	r19
    1038:	27 95       	ror	r18
    103a:	1a 95       	dec	r17
    103c:	d1 f7       	brne	.-12     	; 0x1032 <bme280_compensate_data+0x72c>
    103e:	10 2d       	mov	r17, r0
    1040:	c7 01       	movw	r24, r14
    1042:	b6 01       	movw	r22, r12
    1044:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
    1048:	6b 01       	movw	r12, r22
    104a:	7c 01       	movw	r14, r24
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	ff 20       	and	r15, r15
    1052:	24 f4       	brge	.+8      	; 0x105c <bme280_compensate_data+0x756>
    1054:	81 50       	subi	r24, 0x01	; 1
    1056:	90 48       	sbci	r25, 0x80	; 128
    1058:	af 4f       	sbci	r26, 0xFF	; 255
    105a:	bf 4f       	sbci	r27, 0xFF	; 255
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	05 2e       	mov	r0, r21
    1062:	5f e0       	ldi	r21, 0x0F	; 15
    1064:	95 95       	asr	r25
    1066:	87 95       	ror	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	5a 95       	dec	r21
    106e:	d1 f7       	brne	.-12     	; 0x1064 <bme280_compensate_data+0x75e>
    1070:	50 2d       	mov	r21, r0
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__mulsi3>
    107a:	4b 01       	movw	r8, r22
    107c:	5c 01       	movw	r10, r24
    107e:	99 23       	and	r25, r25
    1080:	2c f4       	brge	.+10     	; 0x108c <bme280_compensate_data+0x786>
    1082:	2f e7       	ldi	r18, 0x7F	; 127
    1084:	82 0e       	add	r8, r18
    1086:	91 1c       	adc	r9, r1
    1088:	a1 1c       	adc	r10, r1
    108a:	b1 1c       	adc	r11, r1
    108c:	a5 01       	movw	r20, r10
    108e:	94 01       	movw	r18, r8
    1090:	68 94       	set
    1092:	16 f8       	bld	r1, 6
    1094:	55 95       	asr	r21
    1096:	47 95       	ror	r20
    1098:	37 95       	ror	r19
    109a:	27 95       	ror	r18
    109c:	16 94       	lsr	r1
    109e:	d1 f7       	brne	.-12     	; 0x1094 <bme280_compensate_data+0x78e>
    10a0:	ea 81       	ldd	r30, Y+2	; 0x02
    10a2:	fb 81       	ldd	r31, Y+3	; 0x03
    10a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	0e 94 42 0c 	call	0x1884	; 0x1884 <__muluhisi3>
    10ac:	4b 01       	movw	r8, r22
    10ae:	5c 01       	movw	r10, r24
    10b0:	99 23       	and	r25, r25
    10b2:	2c f4       	brge	.+10     	; 0x10be <bme280_compensate_data+0x7b8>
    10b4:	ff e0       	ldi	r31, 0x0F	; 15
    10b6:	8f 0e       	add	r8, r31
    10b8:	91 1c       	adc	r9, r1
    10ba:	a1 1c       	adc	r10, r1
    10bc:	b1 1c       	adc	r11, r1
    10be:	d5 01       	movw	r26, r10
    10c0:	c4 01       	movw	r24, r8
    10c2:	68 94       	set
    10c4:	13 f8       	bld	r1, 3
    10c6:	b5 95       	asr	r27
    10c8:	a7 95       	ror	r26
    10ca:	97 95       	ror	r25
    10cc:	87 95       	ror	r24
    10ce:	16 94       	lsr	r1
    10d0:	d1 f7       	brne	.-12     	; 0x10c6 <bme280_compensate_data+0x7c0>
	var5 = (var5 < 0 ? 0 : var5);
    10d2:	c8 1a       	sub	r12, r24
    10d4:	d9 0a       	sbc	r13, r25
    10d6:	ea 0a       	sbc	r14, r26
    10d8:	fb 0a       	sbc	r15, r27
    10da:	1a f4       	brpl	.+6      	; 0x10e2 <bme280_compensate_data+0x7dc>
    10dc:	c1 2c       	mov	r12, r1
    10de:	d1 2c       	mov	r13, r1
    10e0:	76 01       	movw	r14, r12
	var5 = (var5 > 419430400 ? 419430400 : var5);
	humidity = (uint32_t)(var5 / 4096);
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	c2 16       	cp	r12, r18
    10e6:	d1 04       	cpc	r13, r1
    10e8:	e1 04       	cpc	r14, r1
    10ea:	29 e1       	ldi	r18, 0x19	; 25
    10ec:	f2 06       	cpc	r15, r18
    10ee:	3c f0       	brlt	.+14     	; 0x10fe <bme280_compensate_data+0x7f8>
    10f0:	0f 2e       	mov	r0, r31
    10f2:	c1 2c       	mov	r12, r1
    10f4:	d1 2c       	mov	r13, r1
    10f6:	e1 2c       	mov	r14, r1
    10f8:	f9 e1       	ldi	r31, 0x19	; 25
    10fa:	ff 2e       	mov	r15, r31
    10fc:	f0 2d       	mov	r31, r0
    10fe:	d7 01       	movw	r26, r14
    1100:	c6 01       	movw	r24, r12
    1102:	ff 20       	and	r15, r15
    1104:	24 f4       	brge	.+8      	; 0x110e <bme280_compensate_data+0x808>
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	90 4f       	sbci	r25, 0xF0	; 240
    110a:	af 4f       	sbci	r26, 0xFF	; 255
    110c:	bf 4f       	sbci	r27, 0xFF	; 255
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
		}
		if (sensor_comp & BME280_HUM) {
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
    110e:	07 2e       	mov	r0, r23
    1110:	7c e0       	ldi	r23, 0x0C	; 12
    1112:	b5 95       	asr	r27
    1114:	a7 95       	ror	r26
    1116:	97 95       	ror	r25
    1118:	87 95       	ror	r24
    111a:	7a 95       	dec	r23
    111c:	d1 f7       	brne	.-12     	; 0x1112 <bme280_compensate_data+0x80c>
    111e:	70 2d       	mov	r23, r0
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	30 e9       	ldi	r19, 0x90	; 144
    1124:	93 07       	cpc	r25, r19
    1126:	31 e0       	ldi	r19, 0x01	; 1
    1128:	a3 07       	cpc	r26, r19
    112a:	b1 05       	cpc	r27, r1
    112c:	20 f0       	brcs	.+8      	; 0x1136 <bme280_compensate_data+0x830>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e9       	ldi	r25, 0x90	; 144
    1132:	a1 e0       	ldi	r26, 0x01	; 1
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	f8 01       	movw	r30, r16
    1138:	80 87       	std	Z+8, r24	; 0x08
    113a:	91 87       	std	Z+9, r25	; 0x09
    113c:	a2 87       	std	Z+10, r26	; 0x0a
    113e:	b3 87       	std	Z+11, r27	; 0x0b
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
	int8_t rslt = BME280_OK;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <bme280_compensate_data+0x84c>
		if (sensor_comp & BME280_HUM) {
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
		}
	} else {
		rslt = BME280_E_NULL_PTR;
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <bme280_compensate_data+0x84c>
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <bme280_compensate_data+0x84c>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <bme280_compensate_data+0x84c>
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
	int8_t rslt = BME280_OK;
    1150:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		rslt = BME280_E_NULL_PTR;
	}

	return rslt;
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	7f 90       	pop	r7
    1172:	6f 90       	pop	r6
    1174:	5f 90       	pop	r5
    1176:	4f 90       	pop	r4
    1178:	3f 90       	pop	r3
    117a:	2f 90       	pop	r2
    117c:	08 95       	ret

0000117e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	64 97       	sbiw	r28, 0x14	; 20
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	d8 2e       	mov	r13, r24
    119e:	7b 01       	movw	r14, r22
    11a0:	8a 01       	movw	r16, r20
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
    11a2:	fe 01       	movw	r30, r28
    11a4:	31 96       	adiw	r30, 0x01	; 1
    11a6:	88 e0       	ldi	r24, 0x08	; 8
    11a8:	df 01       	movw	r26, r30
    11aa:	1d 92       	st	X+, r1
    11ac:	8a 95       	dec	r24
    11ae:	e9 f7       	brne	.-6      	; 0x11aa <bme280_get_sensor_data+0x2c>
	struct bme280_uncomp_data uncomp_data = {0};
    11b0:	38 96       	adiw	r30, 0x08	; 8
    11b2:	8c e0       	ldi	r24, 0x0C	; 12
    11b4:	df 01       	movw	r26, r30
    11b6:	1d 92       	st	X+, r1
    11b8:	8a 95       	dec	r24
    11ba:	e9 f7       	brne	.-6      	; 0x11b6 <bme280_get_sensor_data+0x38>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
    11bc:	ca 01       	movw	r24, r20
    11be:	0e 94 53 00 	call	0xa6	; 0xa6 <null_ptr_check>

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
    11c2:	81 11       	cpse	r24, r1
    11c4:	20 c0       	rjmp	.+64     	; 0x1206 <bme280_get_sensor_data+0x88>
    11c6:	e1 14       	cp	r14, r1
    11c8:	f1 04       	cpc	r15, r1
    11ca:	f9 f0       	breq	.+62     	; 0x120a <bme280_get_sensor_data+0x8c>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
    11cc:	98 01       	movw	r18, r16
    11ce:	48 e0       	ldi	r20, 0x08	; 8
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	be 01       	movw	r22, r28
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	87 ef       	ldi	r24, 0xF7	; 247
    11da:	0e 94 6c 00 	call	0xd8	; 0xd8 <bme280_get_regs>

		if (rslt == BME280_OK) {
    11de:	81 11       	cpse	r24, r1
    11e0:	15 c0       	rjmp	.+42     	; 0x120c <bme280_get_sensor_data+0x8e>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
    11e2:	be 01       	movw	r22, r28
    11e4:	67 5f       	subi	r22, 0xF7	; 247
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	0e 94 09 04 	call	0x812	; 0x812 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
    11f0:	98 01       	movw	r18, r16
    11f2:	27 5f       	subi	r18, 0xF7	; 247
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	a7 01       	movw	r20, r14
    11f8:	be 01       	movw	r22, r28
    11fa:	67 5f       	subi	r22, 0xF7	; 247
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	8d 2d       	mov	r24, r13
    1200:	0e 94 83 04 	call	0x906	; 0x906 <bme280_compensate_data>
    1204:	03 c0       	rjmp	.+6      	; 0x120c <bme280_get_sensor_data+0x8e>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	01 c0       	rjmp	.+2      	; 0x120c <bme280_get_sensor_data+0x8e>
    120a:	8f ef       	ldi	r24, 0xFF	; 255
	}

	return rslt;
}
    120c:	64 96       	adiw	r28, 0x14	; 20
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	08 95       	ret

00001228 <bme280_setup_weather_monitoring_meas>:
/************************************************************************/
/*   Additional functions to interface static functions to RWS project  */
/*   Gaal Alexandru 14/09/2018											*/
/************************************************************************/
int8_t bme280_setup_weather_monitoring_meas(struct bme280_dev *dev)
{
    1228:	fc 01       	movw	r30, r24
	int8_t rslt;
	uint8_t settings_sel;
	/* Recommended mode of operation: Weather monitoring */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 ab       	std	Z+48, r24	; 0x30
	dev->settings.osr_p = BME280_OVERSAMPLING_1X;
    122e:	86 a7       	std	Z+46, r24	; 0x2e
	dev->settings.osr_t = BME280_OVERSAMPLING_1X;
    1230:	87 a7       	std	Z+47, r24	; 0x2f
	dev->settings.filter = BME280_FILTER_COEFF_OFF;
    1232:	11 aa       	std	Z+49, r1	; 0x31
	
	settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel |= BME280_OSR_TEMP_SEL;
	settings_sel |= BME280_OSR_HUM_SEL;
	settings_sel |= BME280_FILTER_SEL;
	rslt = bme280_set_sensor_settings(settings_sel, dev);
    1234:	bf 01       	movw	r22, r30
    1236:	8f e0       	ldi	r24, 0x0F	; 15
    1238:	0e 94 80 03 	call	0x700	; 0x700 <bme280_set_sensor_settings>
	return rslt;
}
    123c:	08 95       	ret

0000123e <print_bme280_data>:
		timer_delay_ms(2000);
    }
}

void print_bme280_data(struct bme280_data *comp_data)
{
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	ec 01       	movw	r28, r24
	uart_send_string("Temperature: ");	uart_send_udec(comp_data->temperature);	uart_newline();
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    124c:	6c 81       	ldd	r22, Y+4	; 0x04
    124e:	7d 81       	ldd	r23, Y+5	; 0x05
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	9f 81       	ldd	r25, Y+7	; 0x07
    1254:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <uart_send_udec>
    1258:	8d e0       	ldi	r24, 0x0D	; 13
    125a:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    125e:	8a e0       	ldi	r24, 0x0A	; 10
    1260:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
	uart_send_string("Pressure: ");	uart_send_udec(comp_data->pressure);uart_newline();
    1264:	8e e0       	ldi	r24, 0x0E	; 14
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    126c:	68 81       	ld	r22, Y
    126e:	79 81       	ldd	r23, Y+1	; 0x01
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <uart_send_udec>
    1278:	8d e0       	ldi	r24, 0x0D	; 13
    127a:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    127e:	8a e0       	ldi	r24, 0x0A	; 10
    1280:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
	uart_send_string("Humidity: ");	uart_send_udec(comp_data->humidity);uart_newline();
    1284:	89 e1       	ldi	r24, 0x19	; 25
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    128c:	68 85       	ldd	r22, Y+8	; 0x08
    128e:	79 85       	ldd	r23, Y+9	; 0x09
    1290:	8a 85       	ldd	r24, Y+10	; 0x0a
    1292:	9b 85       	ldd	r25, Y+11	; 0x0b
    1294:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <uart_send_udec>
    1298:	8d e0       	ldi	r24, 0x0D	; 13
    129a:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <main>:
struct bme280_dev bme280_interf;

void print_bme280_data(struct bme280_data *comp_data);

int main(void)
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	2c 97       	sbiw	r28, 0x0c	; 12
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
	int8_t rslt = BME280_OK;
	uint8_t u8state = 0;
	struct bme280_uncomp_data uncomp_data;
	struct bme280_data comp_data;
	
	DDRC = 0x01;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	87 b9       	out	0x07, r24	; 7
	
	cli();
    12c2:	f8 94       	cli
	uart_init(MYUBRR);
    12c4:	63 e3       	ldi	r22, 0x33	; 51
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 ef 0a 	call	0x15de	; 0x15de <uart_init>
	timer0_init(); //global timer init
    12d0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <timer0_init>
	timer2_init(); //global timer init
    12d4:	0e 94 81 0a 	call	0x1502	; 0x1502 <timer2_init>
	spi_init();
    12d8:	0e 94 2d 0a 	call	0x145a	; 0x145a <spi_init>
	sei();
    12dc:	78 94       	sei
	
	LOG_STR("Compiled on: ",__DATE__);
    12de:	84 e2       	ldi	r24, 0x24	; 36
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    12e6:	82 e3       	ldi	r24, 0x32	; 50
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    12ee:	8d e0       	ldi	r24, 0x0D	; 13
    12f0:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    12f4:	8a e0       	ldi	r24, 0x0A	; 10
    12f6:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
	LOG_STR("Compiled at: ",__TIME__);
    12fa:	8e e3       	ldi	r24, 0x3E	; 62
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    1302:	8c e4       	ldi	r24, 0x4C	; 76
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    130a:	8d e0       	ldi	r24, 0x0D	; 13
    130c:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    1310:	8a e0       	ldi	r24, 0x0A	; 10
    1312:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
	LOG_STR("Drivers initialized: ","UART & SPI");
    1316:	85 e5       	ldi	r24, 0x55	; 85
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    131e:	8b e6       	ldi	r24, 0x6B	; 107
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    1326:	8d e0       	ldi	r24, 0x0D	; 13
    1328:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    132c:	8a e0       	ldi	r24, 0x0A	; 10
    132e:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
	
	
	
	#if USE_BME280
	/* Sensor_0 interface over SPI with native chip select line */
	bme280_interf.dev_id = 0;
    1332:	eb ef       	ldi	r30, 0xFB	; 251
    1334:	f2 e0       	ldi	r31, 0x02	; 2
    1336:	11 82       	std	Z+1, r1	; 0x01
	bme280_interf.intf = BME280_SPI_INTF;
    1338:	12 82       	std	Z+2, r1	; 0x02
	bme280_interf.read = spi_transfer_sensors;
    133a:	81 e4       	ldi	r24, 0x41	; 65
    133c:	9a e0       	ldi	r25, 0x0A	; 10
    133e:	94 83       	std	Z+4, r25	; 0x04
    1340:	83 83       	std	Z+3, r24	; 0x03
	bme280_interf.write = spi_transfer_sensors;
    1342:	96 83       	std	Z+6, r25	; 0x06
    1344:	85 83       	std	Z+5, r24	; 0x05
	bme280_interf.delay_ms = timer_delay_ms;
    1346:	82 e9       	ldi	r24, 0x92	; 146
    1348:	9a e0       	ldi	r25, 0x0A	; 10
    134a:	90 87       	std	Z+8, r25	; 0x08
    134c:	87 83       	std	Z+7, r24	; 0x07
	rslt = bme280_init(&bme280_interf);
    134e:	cf 01       	movw	r24, r30
    1350:	0e 94 25 02 	call	0x44a	; 0x44a <bme280_init>
    1354:	18 2f       	mov	r17, r24
	
	LOG_DEC("BME280 sensor initialized with state: ",rslt);
    1356:	86 e7       	ldi	r24, 0x76	; 118
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    135e:	61 2f       	mov	r22, r17
    1360:	11 0f       	add	r17, r17
    1362:	77 0b       	sbc	r23, r23
    1364:	88 0b       	sbc	r24, r24
    1366:	99 0b       	sbc	r25, r25
    1368:	0e 94 6f 0b 	call	0x16de	; 0x16de <uart_send_dec>
    136c:	8d e0       	ldi	r24, 0x0D	; 13
    136e:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    1372:	8a e0       	ldi	r24, 0x0A	; 10
    1374:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
	rslt = bme280_setup_weather_monitoring_meas(&bme280_interf);
    1378:	8b ef       	ldi	r24, 0xFB	; 251
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	0e 94 14 09 	call	0x1228	; 0x1228 <bme280_setup_weather_monitoring_meas>
    1380:	18 2f       	mov	r17, r24
	LOG_DEC("BME280 sensor setup with state: ",rslt);
    1382:	8d e9       	ldi	r24, 0x9D	; 157
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    138a:	61 2f       	mov	r22, r17
    138c:	11 0f       	add	r17, r17
    138e:	77 0b       	sbc	r23, r23
    1390:	88 0b       	sbc	r24, r24
    1392:	99 0b       	sbc	r25, r25
    1394:	0e 94 6f 0b 	call	0x16de	; 0x16de <uart_send_dec>
    1398:	8d e0       	ldi	r24, 0x0D	; 13
    139a:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    139e:	8a e0       	ldi	r24, 0x0A	; 10
    13a0:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
	LOG_STR("Hardware initialized: ","BME280 Sensor");
    13a4:	8e eb       	ldi	r24, 0xBE	; 190
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    13ac:	85 ed       	ldi	r24, 0xD5	; 213
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    13b4:	8d e0       	ldi	r24, 0x0D	; 13
    13b6:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    13ba:	8a e0       	ldi	r24, 0x0A	; 10
    13bc:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
void print_bme280_data(struct bme280_data *comp_data);

int main(void)
{
	int8_t rslt = BME280_OK;
	uint8_t u8state = 0;
    13c0:	00 e0       	ldi	r16, 0x00	; 0
	LOG_DEC("BME280 sensor setup with state: ",rslt);
	LOG_STR("Hardware initialized: ","BME280 Sensor");
	#endif //USE_BME280
	
    while(1) {
		u8state ^= 0x01;
    13c2:	ff 24       	eor	r15, r15
    13c4:	f3 94       	inc	r15
    13c6:	0f 25       	eor	r16, r15
		if (u8state) {
    13c8:	11 f0       	breq	.+4      	; 0x13ce <main+0x124>
			PORTC |= 0x01;
    13ca:	40 9a       	sbi	0x08, 0	; 8
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <main+0x126>
		} else {
			PORTC &= ~0x01;
    13ce:	40 98       	cbi	0x08, 0	; 8
		}

		rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &bme280_interf);  //trigger forced measurement
    13d0:	6b ef       	ldi	r22, 0xFB	; 251
    13d2:	72 e0       	ldi	r23, 0x02	; 2
    13d4:	8f 2d       	mov	r24, r15
    13d6:	0e 94 c5 03 	call	0x78a	; 0x78a <bme280_set_sensor_mode>
    13da:	18 2f       	mov	r17, r24
		LOG_DEC("BME280 sensor force mode trigger with state: ",rslt);
    13dc:	83 ee       	ldi	r24, 0xE3	; 227
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    13e4:	61 2f       	mov	r22, r17
    13e6:	11 0f       	add	r17, r17
    13e8:	77 0b       	sbc	r23, r23
    13ea:	88 0b       	sbc	r24, r24
    13ec:	99 0b       	sbc	r25, r25
    13ee:	0e 94 6f 0b 	call	0x16de	; 0x16de <uart_send_dec>
    13f2:	8d e0       	ldi	r24, 0x0D	; 13
    13f4:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
		bme280_interf.delay_ms(200);  //delay needed for measurement to complete
    13fe:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <bme280_interf+0x7>
    1402:	f0 91 03 03 	lds	r31, 0x0303	; 0x800303 <bme280_interf+0x8>
    1406:	68 ec       	ldi	r22, 0xC8	; 200
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	09 95       	icall
		//rslt = bme280_get_raw_sensor_data(BME280_ALL, &uncomp_data, &bme280_interf);
		//LOG_DEC("BME280 sensor RAW read with state: ",rslt);
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme280_interf);
    1410:	4b ef       	ldi	r20, 0xFB	; 251
    1412:	52 e0       	ldi	r21, 0x02	; 2
    1414:	be 01       	movw	r22, r28
    1416:	6f 5f       	subi	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	87 e0       	ldi	r24, 0x07	; 7
    141c:	0e 94 bf 08 	call	0x117e	; 0x117e <bme280_get_sensor_data>
    1420:	18 2f       	mov	r17, r24
		print_bme280_data(&comp_data);
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 1f 09 	call	0x123e	; 0x123e <print_bme280_data>
		uart_send_string("BME280 sensor read with state: ");uart_send_dec(rslt);uart_newline();
    142a:	81 e1       	ldi	r24, 0x11	; 17
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	0e 94 42 0b 	call	0x1684	; 0x1684 <uart_send_string>
    1432:	61 2f       	mov	r22, r17
    1434:	11 0f       	add	r17, r17
    1436:	77 0b       	sbc	r23, r23
    1438:	88 0b       	sbc	r24, r24
    143a:	99 0b       	sbc	r25, r25
    143c:	0e 94 6f 0b 	call	0x16de	; 0x16de <uart_send_dec>
    1440:	8d e0       	ldi	r24, 0x0D	; 13
    1442:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    1446:	8a e0       	ldi	r24, 0x0A	; 10
    1448:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
		
		timer_delay_ms(2000);
    144c:	60 ed       	ldi	r22, 0xD0	; 208
    144e:	77 e0       	ldi	r23, 0x07	; 7
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 92 0a 	call	0x1524	; 0x1524 <timer_delay_ms>
    }
    1458:	b6 cf       	rjmp	.-148    	; 0x13c6 <main+0x11c>

0000145a <spi_init>:

/* SPI Initialization function*/
void spi_init(void)
{
	//For operating in master mode, MOSI, SS, SCK pins must be set as output
	SPI_DDR |= (1<<SPI_MOSI_PIN)|(1<<SPI_SS_PIN)|(1<<SPI_SCK_PIN);
    145a:	84 b1       	in	r24, 0x04	; 4
    145c:	8c 62       	ori	r24, 0x2C	; 44
    145e:	84 b9       	out	0x04, r24	; 4
	SPCR = 0;
    1460:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0;
    1462:	1d bc       	out	0x2d, r1	; 45
	SPSR |= (1<<SPI2X);
    1464:	8d b5       	in	r24, 0x2d	; 45
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	8d bd       	out	0x2d, r24	; 45
	//polarity & phase 00
	//spi clock pre-scaler = 64, see table bellow
	#if SPI_USE_INT
		SPCR |= (1<<SPIE)|(1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
	#else
		SPCR |= (1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)*/|(1<<SPR0)|(1<<SPR1);
    146a:	8c b5       	in	r24, 0x2c	; 44
    146c:	83 65       	ori	r24, 0x53	; 83
    146e:	8c bd       	out	0x2c, r24	; 44
	1		1		0		fosc/32
	1		1		1		fosc/64
	*/
	
	//Init CS line for all SPI devices, as output
	INIT_CS_PIN(CS_BME280_DDR,CS_BME280_PIN);
    1470:	21 9a       	sbi	0x04, 1	; 4
	//Disable CS line for all SPI devices, by setting them high
	SET_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
    1472:	29 9a       	sbi	0x05, 1	; 5
    1474:	08 95       	ret

00001476 <spi_transfer_generic>:
/*                SPI Send / Receive function definitions               */
/************************************************************************/
/* SPI Send and Receive 1 Byte function */
uint8_t spi_transfer_generic(uint8_t u8data)
{
	SPDR = u8data;
    1476:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){}
    1478:	0d b4       	in	r0, 0x2d	; 45
    147a:	07 fe       	sbrs	r0, 7
    147c:	fd cf       	rjmp	.-6      	; 0x1478 <spi_transfer_generic+0x2>
	return SPDR;
    147e:	8e b5       	in	r24, 0x2e	; 46
}
    1480:	08 95       	ret

00001482 <spi_transfer_sensors>:
* @param reg_data	: Pointer to the array containing the data to be read or written
* @param len		: Length of the array of data
* @return	Zero for success, non-zero otherwise
*/
void spi_transfer_sensors(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	08 2f       	mov	r16, r24
    1494:	86 2f       	mov	r24, r22
    1496:	6a 01       	movw	r12, r20
    1498:	79 01       	movw	r14, r18
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
    149a:	01 11       	cpse	r16, r1
    149c:	1a c0       	rjmp	.+52     	; 0x14d2 <spi_transfer_sensors+0x50>
    149e:	29 98       	cbi	0x05, 1	; 5
	
	spi_transfer_generic(reg_addr); // Write the register address, ignore the return
    14a0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <spi_transfer_generic>
	
	for (uint8_t i = 0; i < len; i++)
    14a4:	e1 14       	cp	r14, r1
    14a6:	f1 04       	cpc	r15, r1
    14a8:	91 f0       	breq	.+36     	; 0x14ce <spi_transfer_sensors+0x4c>
* @param reg_data	: Pointer to the array containing the data to be read or written
* @param len		: Length of the array of data
* @return	Zero for success, non-zero otherwise
*/
void spi_transfer_sensors(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	10 e0       	ldi	r17, 0x00	; 0
	
	spi_transfer_generic(reg_addr); // Write the register address, ignore the return
	
	for (uint8_t i = 0; i < len; i++)
	{
		reg_data[i] = spi_transfer_generic(reg_data[i]);  //write / read register content
    14b0:	e6 01       	movw	r28, r12
    14b2:	c8 0f       	add	r28, r24
    14b4:	d9 1f       	adc	r29, r25
    14b6:	88 81       	ld	r24, Y
    14b8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <spi_transfer_generic>
    14bc:	88 83       	st	Y, r24
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
	
	spi_transfer_generic(reg_addr); // Write the register address, ignore the return
	
	for (uint8_t i = 0; i < len; i++)
    14be:	1f 5f       	subi	r17, 0xFF	; 255
    14c0:	81 2f       	mov	r24, r17
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	8e 15       	cp	r24, r14
    14c6:	9f 05       	cpc	r25, r15
    14c8:	98 f3       	brcs	.-26     	; 0x14b0 <spi_transfer_sensors+0x2e>
	{
		reg_data[i] = spi_transfer_generic(reg_data[i]);  //write / read register content
	}
	
	if(dev_id == bme280) SET_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
    14ca:	01 11       	cpse	r16, r1
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <spi_transfer_sensors+0x5a>
    14ce:	29 9a       	sbi	0x05, 1	; 5
}
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <spi_transfer_sensors+0x5a>
void spi_transfer_sensors(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
	//select which Chip Select pin has	to be set low to activate the relevant device on the SPI bus
	if(dev_id == bme280) CLEAR_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
	
	spi_transfer_generic(reg_addr); // Write the register address, ignore the return
    14d2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <spi_transfer_generic>
	
	for (uint8_t i = 0; i < len; i++)
    14d6:	e1 14       	cp	r14, r1
    14d8:	f1 04       	cpc	r15, r1
    14da:	39 f7       	brne	.-50     	; 0x14aa <spi_transfer_sensors+0x28>
	{
		reg_data[i] = spi_transfer_generic(reg_data[i]);  //write / read register content
	}
	
	if(dev_id == bme280) SET_CS_PIN(CS_BME280_PORT,CS_BME280_PIN);
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	08 95       	ret

000014ee <timer0_init>:
{
	//Not necessary to make atomic operation since it's 
	//a short and fast function and it is not critical if
	//returned value is +/- 1 ms in this case
	return timer_system_ms;
}
    14ee:	8f e7       	ldi	r24, 0x7F	; 127
    14f0:	86 bd       	out	0x26, r24	; 38
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	85 bd       	out	0x25, r24	; 37
    14f6:	ee e6       	ldi	r30, 0x6E	; 110
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	81 60       	ori	r24, 0x01	; 1
    14fe:	80 83       	st	Z, r24
    1500:	08 95       	ret

00001502 <timer2_init>:
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    150e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    1512:	8d e7       	ldi	r24, 0x7D	; 125
    1514:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1518:	e0 e7       	ldi	r30, 0x70	; 112
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	80 83       	st	Z, r24
    1522:	08 95       	ret

00001524 <timer_delay_ms>:
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	00 91 32 02 	lds	r16, 0x0232	; 0x800232 <__data_end>
    152c:	10 91 33 02 	lds	r17, 0x0233	; 0x800233 <__data_end+0x1>
    1530:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end+0x2>
    1534:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__data_end+0x3>
    1538:	ab 01       	movw	r20, r22
    153a:	bc 01       	movw	r22, r24
    153c:	40 0f       	add	r20, r16
    153e:	51 1f       	adc	r21, r17
    1540:	62 1f       	adc	r22, r18
    1542:	73 1f       	adc	r23, r19
    1544:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
    1548:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x1>
    154c:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <__data_end+0x2>
    1550:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <__data_end+0x3>
    1554:	84 17       	cp	r24, r20
    1556:	95 07       	cpc	r25, r21
    1558:	a6 07       	cpc	r26, r22
    155a:	b7 07       	cpc	r27, r23
    155c:	98 f3       	brcs	.-26     	; 0x1544 <timer_delay_ms+0x20>
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <__vector_16>:
/*	               Timer Interrupt Service Routines                     */
/************************************************************************/

/* Timer0 Overflow Interrupt function*/
ISR (TIMER0_OVF_vect)
{
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	8f 93       	push	r24
	TCNT0 = 127;
    1570:	8f e7       	ldi	r24, 0x7F	; 127
    1572:	86 bd       	out	0x26, r24	; 38
}
    1574:	8f 91       	pop	r24
    1576:	0f 90       	pop	r0
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	0f 90       	pop	r0
    157c:	1f 90       	pop	r1
    157e:	18 95       	reti

00001580 <__vector_11>:

/* Timer1 Compare Match A Interrupt function*/
ISR (TIMER1_COMPA_vect)
{
    1580:	1f 92       	push	r1
    1582:	0f 92       	push	r0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	0f 92       	push	r0
    1588:	11 24       	eor	r1, r1
	

}
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti

00001594 <__vector_7>:
#if ATMEGA48
ISR (TIMER2_COMPA_vect)
#elif ATMEGA8
ISR (TIMER2_COMP_vect)
#endif
{
    1594:	1f 92       	push	r1
    1596:	0f 92       	push	r0
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	0f 92       	push	r0
    159c:	11 24       	eor	r1, r1
    159e:	8f 93       	push	r24
    15a0:	9f 93       	push	r25
    15a2:	af 93       	push	r26
    15a4:	bf 93       	push	r27
	timer_system_ms++; //increment every 1 ms
    15a6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
    15aa:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x1>
    15ae:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <__data_end+0x2>
    15b2:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <__data_end+0x3>
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	a1 1d       	adc	r26, r1
    15ba:	b1 1d       	adc	r27, r1
    15bc:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
    15c0:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <__data_end+0x1>
    15c4:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <__data_end+0x2>
    15c8:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <__data_end+0x3>
}
    15cc:	bf 91       	pop	r27
    15ce:	af 91       	pop	r26
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	0f 90       	pop	r0
    15da:	1f 90       	pop	r1
    15dc:	18 95       	reti

000015de <uart_init>:
	while(uart_rx_buflen() > 0) 
	{
		uart_get_char();
	}
	rx_in = rx_out = 0;
	cr_flag = false;
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	c0 ec       	ldi	r28, 0xC0	; 192
    15e8:	d0 e0       	ldi	r29, 0x00	; 0
    15ea:	18 82       	st	Y, r1
    15ec:	a1 ec       	ldi	r26, 0xC1	; 193
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	1c 92       	st	X, r1
    15f2:	e2 ec       	ldi	r30, 0xC2	; 194
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	10 82       	st	Z, r1
    15f8:	07 2f       	mov	r16, r23
    15fa:	18 2f       	mov	r17, r24
    15fc:	29 2f       	mov	r18, r25
    15fe:	33 27       	eor	r19, r19
    1600:	00 93 c5 00 	sts	0x00C5, r16	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1604:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	88 83       	st	Y, r24
    160c:	88 e9       	ldi	r24, 0x98	; 152
    160e:	8c 93       	st	X, r24
    1610:	86 e0       	ldi	r24, 0x06	; 6
    1612:	80 83       	st	Z, r24
    1614:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <cr_flag>
    1618:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <rx_out>
    161c:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <rx_in>
    1620:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <tx_out>
    1624:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <tx_in>
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <uart_tx_buflen>:
    1632:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <tx_in>
    1636:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <tx_out>
    163a:	89 1b       	sub	r24, r25
    163c:	08 95       	ret

0000163e <uart_send_char>:
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	18 2f       	mov	r17, r24
    1646:	c0 e4       	ldi	r28, 0x40	; 64
    1648:	d0 e0       	ldi	r29, 0x00	; 0
    164a:	0e 94 19 0b 	call	0x1632	; 0x1632 <uart_tx_buflen>
    164e:	9e 01       	movw	r18, r28
    1650:	28 1b       	sub	r18, r24
    1652:	31 09       	sbc	r19, r1
    1654:	23 30       	cpi	r18, 0x03	; 3
    1656:	31 05       	cpc	r19, r1
    1658:	c4 f3       	brlt	.-16     	; 0x164a <uart_send_char+0xc>
    165a:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <tx_in>
    165e:	ef 73       	andi	r30, 0x3F	; 63
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	e5 54       	subi	r30, 0x45	; 69
    1664:	fd 4f       	sbci	r31, 0xFD	; 253
    1666:	10 83       	st	Z, r17
    1668:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <tx_in>
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <tx_in>
    1672:	e1 ec       	ldi	r30, 0xC1	; 193
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 62       	ori	r24, 0x20	; 32
    167a:	80 83       	st	Z, r24
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	08 95       	ret

00001684 <uart_send_string>:
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	ec 01       	movw	r28, r24
    168a:	88 81       	ld	r24, Y
    168c:	88 23       	and	r24, r24
    168e:	31 f0       	breq	.+12     	; 0x169c <uart_send_string+0x18>
    1690:	21 96       	adiw	r28, 0x01	; 1
    1692:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    1696:	89 91       	ld	r24, Y+
    1698:	81 11       	cpse	r24, r1
    169a:	fb cf       	rjmp	.-10     	; 0x1692 <uart_send_string+0xe>
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <uart_send_udec>:
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	6a 30       	cpi	r22, 0x0A	; 10
    16ac:	71 05       	cpc	r23, r1
    16ae:	81 05       	cpc	r24, r1
    16b0:	91 05       	cpc	r25, r1
    16b2:	60 f0       	brcs	.+24     	; 0x16cc <uart_send_udec+0x2a>
    16b4:	2a e0       	ldi	r18, 0x0A	; 10
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	0e 94 01 0c 	call	0x1802	; 0x1802 <__udivmodsi4>
    16c0:	06 2f       	mov	r16, r22
    16c2:	ca 01       	movw	r24, r20
    16c4:	b9 01       	movw	r22, r18
    16c6:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <uart_send_udec>
    16ca:	60 2f       	mov	r22, r16
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	86 0f       	add	r24, r22
    16d0:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	08 95       	ret

000016de <uart_send_dec>:
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	6b 01       	movw	r12, r22
    16f0:	7c 01       	movw	r14, r24
    16f2:	99 23       	and	r25, r25
    16f4:	5c f4       	brge	.+22     	; 0x170c <uart_send_dec+0x2e>
    16f6:	8d e2       	ldi	r24, 0x2D	; 45
    16f8:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    16fc:	f0 94       	com	r15
    16fe:	e0 94       	com	r14
    1700:	d0 94       	com	r13
    1702:	c0 94       	com	r12
    1704:	c1 1c       	adc	r12, r1
    1706:	d1 1c       	adc	r13, r1
    1708:	e1 1c       	adc	r14, r1
    170a:	f1 1c       	adc	r15, r1
    170c:	8a e0       	ldi	r24, 0x0A	; 10
    170e:	c8 16       	cp	r12, r24
    1710:	d1 04       	cpc	r13, r1
    1712:	e1 04       	cpc	r14, r1
    1714:	f1 04       	cpc	r15, r1
    1716:	74 f0       	brlt	.+28     	; 0x1734 <uart_send_dec+0x56>
    1718:	c7 01       	movw	r24, r14
    171a:	b6 01       	movw	r22, r12
    171c:	2a e0       	ldi	r18, 0x0A	; 10
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 23 0c 	call	0x1846	; 0x1846 <__divmodsi4>
    1728:	06 2f       	mov	r16, r22
    172a:	ca 01       	movw	r24, r20
    172c:	b9 01       	movw	r22, r18
    172e:	0e 94 6f 0b 	call	0x16de	; 0x16de <uart_send_dec>
    1732:	c0 2e       	mov	r12, r16
    1734:	80 e3       	ldi	r24, 0x30	; 48
    1736:	8c 0d       	add	r24, r12
    1738:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_send_char>
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	08 95       	ret

0000174e <__vector_19>:
/************************************************************************/

// Transmit complete interrupt
// USART transmit Data Register Empty interrupt.
ISR (USART_UDRE_vect)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
	if(tx_in != tx_out)  // is buffer empty ?
    1760:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <tx_in>
    1764:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <tx_out>
    1768:	98 17       	cp	r25, r24
    176a:	79 f0       	breq	.+30     	; 0x178a <__vector_19+0x3c>
	{
		UDR = txbuf[tx_out & TXMASK];
    176c:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <tx_out>
    1770:	ef 73       	andi	r30, 0x3F	; 63
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	e5 54       	subi	r30, 0x45	; 69
    1776:	fd 4f       	sbci	r31, 0xFD	; 253
    1778:	80 81       	ld	r24, Z
    177a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		tx_out++;  // TMASK makes it unnecessary to range limit this
    177e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <tx_out>
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <tx_out>
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <__vector_19+0x46>
	}
	else
	{
		UCSRB &= ~(1 << UDRIE);  // buffer is empty, disable interrupt
    178a:	e1 ec       	ldi	r30, 0xC1	; 193
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8f 7d       	andi	r24, 0xDF	; 223
    1792:	80 83       	st	Z, r24
	}
}
    1794:	ff 91       	pop	r31
    1796:	ef 91       	pop	r30
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
    17a2:	1f 90       	pop	r1
    17a4:	18 95       	reti

000017a6 <__vector_18>:
// Bad:
//    The characters before the CR or LF might all be gone,
//    if the number of received characters is the same as the input buffer.
//
ISR (USART_RXC_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	8f 93       	push	r24
    17b2:	ef 93       	push	r30
    17b4:	ff 93       	push	r31
	rxbuf[rx_in & RXMASK] = UDR;  // Put received char in buffer (no check for overflow)
    17b6:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <rx_in>
    17ba:	ef 77       	andi	r30, 0x7F	; 127
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    17c2:	e5 5c       	subi	r30, 0xC5	; 197
    17c4:	fd 4f       	sbci	r31, 0xFD	; 253
    17c6:	80 83       	st	Z, r24
	rx_in++;  // RMASK makes it unnecessary to range limit this
    17c8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <rx_in>
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <rx_in>
    17d2:	ff 91       	pop	r31
    17d4:	ef 91       	pop	r30
    17d6:	8f 91       	pop	r24
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__mulsi3>:
    17e2:	db 01       	movw	r26, r22
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
    17e8:	0e 94 42 0c 	call	0x1884	; 0x1884 <__muluhisi3>
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	a2 9f       	mul	r26, r18
    17f2:	80 0d       	add	r24, r0
    17f4:	91 1d       	adc	r25, r1
    17f6:	a3 9f       	mul	r26, r19
    17f8:	90 0d       	add	r25, r0
    17fa:	b2 9f       	mul	r27, r18
    17fc:	90 0d       	add	r25, r0
    17fe:	11 24       	eor	r1, r1
    1800:	08 95       	ret

00001802 <__udivmodsi4>:
    1802:	a1 e2       	ldi	r26, 0x21	; 33
    1804:	1a 2e       	mov	r1, r26
    1806:	aa 1b       	sub	r26, r26
    1808:	bb 1b       	sub	r27, r27
    180a:	fd 01       	movw	r30, r26
    180c:	0d c0       	rjmp	.+26     	; 0x1828 <__udivmodsi4_ep>

0000180e <__udivmodsi4_loop>:
    180e:	aa 1f       	adc	r26, r26
    1810:	bb 1f       	adc	r27, r27
    1812:	ee 1f       	adc	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	a2 17       	cp	r26, r18
    1818:	b3 07       	cpc	r27, r19
    181a:	e4 07       	cpc	r30, r20
    181c:	f5 07       	cpc	r31, r21
    181e:	20 f0       	brcs	.+8      	; 0x1828 <__udivmodsi4_ep>
    1820:	a2 1b       	sub	r26, r18
    1822:	b3 0b       	sbc	r27, r19
    1824:	e4 0b       	sbc	r30, r20
    1826:	f5 0b       	sbc	r31, r21

00001828 <__udivmodsi4_ep>:
    1828:	66 1f       	adc	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	88 1f       	adc	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	1a 94       	dec	r1
    1832:	69 f7       	brne	.-38     	; 0x180e <__udivmodsi4_loop>
    1834:	60 95       	com	r22
    1836:	70 95       	com	r23
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	9b 01       	movw	r18, r22
    183e:	ac 01       	movw	r20, r24
    1840:	bd 01       	movw	r22, r26
    1842:	cf 01       	movw	r24, r30
    1844:	08 95       	ret

00001846 <__divmodsi4>:
    1846:	05 2e       	mov	r0, r21
    1848:	97 fb       	bst	r25, 7
    184a:	1e f4       	brtc	.+6      	; 0x1852 <__divmodsi4+0xc>
    184c:	00 94       	com	r0
    184e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__negsi2>
    1852:	57 fd       	sbrc	r21, 7
    1854:	07 d0       	rcall	.+14     	; 0x1864 <__divmodsi4_neg2>
    1856:	0e 94 01 0c 	call	0x1802	; 0x1802 <__udivmodsi4>
    185a:	07 fc       	sbrc	r0, 7
    185c:	03 d0       	rcall	.+6      	; 0x1864 <__divmodsi4_neg2>
    185e:	4e f4       	brtc	.+18     	; 0x1872 <__divmodsi4_exit>
    1860:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__negsi2>

00001864 <__divmodsi4_neg2>:
    1864:	50 95       	com	r21
    1866:	40 95       	com	r20
    1868:	30 95       	com	r19
    186a:	21 95       	neg	r18
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	4f 4f       	sbci	r20, 0xFF	; 255
    1870:	5f 4f       	sbci	r21, 0xFF	; 255

00001872 <__divmodsi4_exit>:
    1872:	08 95       	ret

00001874 <__negsi2>:
    1874:	90 95       	com	r25
    1876:	80 95       	com	r24
    1878:	70 95       	com	r23
    187a:	61 95       	neg	r22
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	8f 4f       	sbci	r24, 0xFF	; 255
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__muluhisi3>:
    1884:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__umulhisi3>
    1888:	a5 9f       	mul	r26, r21
    188a:	90 0d       	add	r25, r0
    188c:	b4 9f       	mul	r27, r20
    188e:	90 0d       	add	r25, r0
    1890:	a4 9f       	mul	r26, r20
    1892:	80 0d       	add	r24, r0
    1894:	91 1d       	adc	r25, r1
    1896:	11 24       	eor	r1, r1
    1898:	08 95       	ret

0000189a <__mulshisi3>:
    189a:	b7 ff       	sbrs	r27, 7
    189c:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__muluhisi3>

000018a0 <__mulohisi3>:
    18a0:	0e 94 42 0c 	call	0x1884	; 0x1884 <__muluhisi3>
    18a4:	82 1b       	sub	r24, r18
    18a6:	93 0b       	sbc	r25, r19
    18a8:	08 95       	ret

000018aa <__umulhisi3>:
    18aa:	a2 9f       	mul	r26, r18
    18ac:	b0 01       	movw	r22, r0
    18ae:	b3 9f       	mul	r27, r19
    18b0:	c0 01       	movw	r24, r0
    18b2:	a3 9f       	mul	r26, r19
    18b4:	70 0d       	add	r23, r0
    18b6:	81 1d       	adc	r24, r1
    18b8:	11 24       	eor	r1, r1
    18ba:	91 1d       	adc	r25, r1
    18bc:	b2 9f       	mul	r27, r18
    18be:	70 0d       	add	r23, r0
    18c0:	81 1d       	adc	r24, r1
    18c2:	11 24       	eor	r1, r1
    18c4:	91 1d       	adc	r25, r1
    18c6:	08 95       	ret

000018c8 <_exit>:
    18c8:	f8 94       	cli

000018ca <__stop_program>:
    18ca:	ff cf       	rjmp	.-2      	; 0x18ca <__stop_program>
