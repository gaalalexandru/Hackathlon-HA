
Hackathlon-HA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba0  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000807  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a4  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00001bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b8  00000000  00000000  000021d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000288b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_LCD>:
#define DISPLAY_WRITE 0x4E 
#define DISPLAY_READ 0xF

void init_LCD(void){

	i2c_start(DISPLAY_WRITE);
  80:	8e e4       	ldi	r24, 0x4E	; 78
  82:	0e 94 5e 00 	call	0xbc	; 0xbc <i2c_start>
	i2c_write(0x60); // set pointer to CRA
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	0e 94 83 00 	call	0x106	; 0x106 <i2c_write>
	i2c_write(0x88); // write 0x70 to CRA
  8c:	88 e8       	ldi	r24, 0x88	; 136
  8e:	0e 94 83 00 	call	0x106	; 0x106 <i2c_write>
	i2c_stop();
  92:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_stop>
  96:	08 95       	ret

00000098 <main>:

}

int main(void){
	
	i2c_init();
  98:	0e 94 5a 00 	call	0xb4	; 0xb4 <i2c_init>
	init_LCD();
  9c:	0e 94 40 00 	call	0x80	; 0x80 <init_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0xe>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x18>
  b0:	00 00       	nop
  b2:	f6 cf       	rjmp	.-20     	; 0xa0 <main+0x8>

000000b4 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
  b4:	88 e4       	ldi	r24, 0x48	; 72
  b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ba:	08 95       	ret

000000bc <i2c_start>:
  bc:	ec eb       	ldi	r30, 0xBC	; 188
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
  c2:	94 ea       	ldi	r25, 0xA4	; 164
  c4:	90 83       	st	Z, r25
  c6:	90 81       	ld	r25, Z
  c8:	99 23       	and	r25, r25
  ca:	ec f7       	brge	.-6      	; 0xc6 <i2c_start+0xa>
  cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d0:	98 7f       	andi	r25, 0xF8	; 248
  d2:	98 30       	cpi	r25, 0x08	; 8
  d4:	a1 f4       	brne	.+40     	; 0xfe <i2c_start+0x42>
  d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e0:	ec eb       	ldi	r30, 0xBC	; 188
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <i2c_start+0x28>
  ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ee:	98 7f       	andi	r25, 0xF8	; 248
  f0:	98 31       	cpi	r25, 0x18	; 24
  f2:	39 f0       	breq	.+14     	; 0x102 <i2c_start+0x46>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 34       	cpi	r25, 0x40	; 64
  f8:	29 f4       	brne	.+10     	; 0x104 <i2c_start+0x48>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 95       	ret
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret

00000106 <i2c_write>:
 106:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	ec f7       	brge	.-6      	; 0x114 <i2c_write+0xe>
 11a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 11e:	98 7f       	andi	r25, 0xF8	; 248
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	98 32       	cpi	r25, 0x28	; 40
 124:	09 f4       	brne	.+2      	; 0x128 <i2c_write+0x22>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
